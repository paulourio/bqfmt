// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/paulourio/bqfmt/zetasql/token"
)

const (
	NoState    = -1
	NumStates  = 266
	NumSymbols = 227
)

type Lexer struct {
	src     []byte
	pos     int
	line    int
	column  int
	Context token.Context
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:     src,
		pos:     0,
		line:    1,
		column:  1,
		Context: nil,
	}
	return lexer
}

// SourceContext is a simple instance of a token.Context which
// contains the name of the source file.
type SourceContext struct {
	Filepath string
}

func (s *SourceContext) Source() string {
	return s.Filepath
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	lexer := NewLexer(src)
	lexer.Context = &SourceContext{Filepath: fpath}
	return lexer, nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = &token.Token{}
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		tok.Pos.Context = l.Context
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn
	tok.Pos.Context = l.Context

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: 'd'
1: 'D'
2: 'a'
3: 'A'
4: 't'
5: 'T'
6: 'e'
7: 'E'
8: 'n'
9: 'N'
10: 'u'
11: 'U'
12: 'm'
13: 'M'
14: 'e'
15: 'E'
16: 'r'
17: 'R'
18: 'i'
19: 'I'
20: 'c'
21: 'C'
22: 'd'
23: 'D'
24: 'e'
25: 'E'
26: 'c'
27: 'C'
28: 'i'
29: 'I'
30: 'm'
31: 'M'
32: 'a'
33: 'A'
34: 'l'
35: 'L'
36: 's'
37: 'S'
38: 'e'
39: 'E'
40: 'l'
41: 'L'
42: 'e'
43: 'E'
44: 'c'
45: 'C'
46: 't'
47: 'T'
48: 'n'
49: 'N'
50: 'o'
51: 'O'
52: 't'
53: 'T'
54: 'f'
55: 'F'
56: 'r'
57: 'R'
58: 'o'
59: 'O'
60: 'm'
61: 'M'
62: 'w'
63: 'W'
64: 'h'
65: 'H'
66: 'e'
67: 'E'
68: 'r'
69: 'R'
70: 'e'
71: 'E'
72: '-'
73: '-'
74: '\n'
75: '#'
76: '\n'
77: '/'
78: '*'
79: '*'
80: '*'
81: '/'
82: '`'
83: '`'
84: ';'
85: ','
86: '('
87: ')'
88: '+'
89: '-'
90: '~'
91: '*'
92: '/'
93: '.'
94: '0'
95: 'x'
96: 'X'
97: '"'
98: '"'
99: '"'
100: '`'
101: '''
102: '"'
103: '\n'
104: '"'
105: '"'
106: '"'
107: '''
108: '''
109: '''
110: '`'
111: '''
112: '"'
113: '\n'
114: '''
115: '''
116: '''
117: '"'
118: '`'
119: '''
120: '"'
121: '''
122: '`'
123: '"'
124: '''
125: '"'
126: '`'
127: '''
128: '"'
129: '''
130: '`'
131: '"'
132: '''
133: '''
134: '''
135: '''
136: '`'
137: '"'
138: '''
139: '''
140: '''
141: '"'
142: '"'
143: '"'
144: '`'
145: '"'
146: '"'
147: '"'
148: '"'
149: '\'
150: 'r'
151: 'R'
152: '\'
153: 'a'
154: 'b'
155: 'f'
156: 'n'
157: 'r'
158: 't'
159: 'v'
160: '"'
161: '?'
162: '`'
163: '\'
164: '''
165: '\'
166: '\'
167: 'x'
168: 'X'
169: '\'
170: 'U'
171: '\'
172: 'u'
173: '_'
174: '_'
175: ' '
176: '!'
177: '@'
178: '#'
179: '$'
180: '%'
181: '^'
182: '&'
183: '*'
184: '('
185: ')'
186: '-'
187: '['
188: ']'
189: '{'
190: '}'
191: ':'
192: ';'
193: ','
194: '.'
195: '?'
196: '/'
197: '~'
198: '<'
199: '>'
200: '"'
201: '\'
202: '''
203: ' '
204: '\t'
205: '\n'
206: '\r'
207: \u00a0
208: '0'-'9'
209: 'a'-'f'
210: 'A'-'F'
211: \u0001-'\t'
212: '\v'-'!'
213: '#'-'&'
214: '('-'['
215: ']'-'_'
216: 'a'-\u007f
217: \u0080-\ufffc
218: \ufffe-\U0010ffff
219: '0'-'7'
220: \u0001-'\t'
221: '\v'-\u007f
222: \u0080-\ufffc
223: \ufffe-\U0010ffff
224: 'a'-'z'
225: 'A'-'Z'
226: .
*/
