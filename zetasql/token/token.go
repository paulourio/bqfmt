// Code generated by gocc; DO NOT EDIT.

package token

import (
	"bytes"
	"fmt"
	"strconv"
	"unicode/utf8"
)

type Token struct {
	Type
	Lit []byte
	Pos
}

type Type int

const (
	INVALID Type = iota
	EOF
)

type Pos struct {
	Offset  int
	Line    int
	Column  int
	Context Context
}

func (p Pos) String() string {
	// If the context provides a filename, provide a human-readable File:Line:Column representation.
	switch src := p.Context.(type) {
	case Sourcer:
		return fmt.Sprintf("%s:%d:%d", src.Source(), p.Line, p.Column)
	default:
		return fmt.Sprintf("Pos(offset=%d, line=%d, column=%d)", p.Offset, p.Line, p.Column)
	}
}

type TokenMap struct {
	typeMap []string
	idMap   map[string]Type
}

func (m TokenMap) Id(tok Type) string {
	if int(tok) < len(m.typeMap) {
		return m.typeMap[tok]
	}
	return "unknown"
}

func (m TokenMap) Type(tok string) Type {
	if typ, exist := m.idMap[tok]; exist {
		return typ
	}
	return INVALID
}

func (m TokenMap) TokenString(tok *Token) string {
	return fmt.Sprintf("%s(%d,%s)", m.Id(tok.Type), tok.Type, tok.Lit)
}

func (m TokenMap) StringType(typ Type) string {
	return fmt.Sprintf("%s(%d)", m.Id(typ), typ)
}

// Equals returns returns true if the token Type and Lit are matches.
func (t *Token) Equals(rhs interface{}) bool {
	switch rhsT := rhs.(type) {
	case *Token:
		return t == rhsT || (t.Type == rhsT.Type && bytes.Equal(t.Lit, rhsT.Lit))
	default:
		return false
	}
}

// CharLiteralValue returns the string value of the char literal.
func (t *Token) CharLiteralValue() string {
	return string(t.Lit[1 : len(t.Lit)-1])
}

// Float32Value returns the float32 value of the token or an error if the token literal does not
// denote a valid float32.
func (t *Token) Float32Value() (float32, error) {
	if v, err := strconv.ParseFloat(string(t.Lit), 32); err != nil {
		return 0, err
	} else {
		return float32(v), nil
	}
}

// Float64Value returns the float64 value of the token or an error if the token literal does not
// denote a valid float64.
func (t *Token) Float64Value() (float64, error) {
	return strconv.ParseFloat(string(t.Lit), 64)
}

// IDValue returns the string representation of an identifier token.
func (t *Token) IDValue() string {
	return string(t.Lit)
}

// Int32Value returns the int32 value of the token or an error if the token literal does not
// denote a valid float64.
func (t *Token) Int32Value() (int32, error) {
	if v, err := strconv.ParseInt(string(t.Lit), 10, 64); err != nil {
		return 0, err
	} else {
		return int32(v), nil
	}
}

// Int64Value returns the int64 value of the token or an error if the token literal does not
// denote a valid float64.
func (t *Token) Int64Value() (int64, error) {
	return strconv.ParseInt(string(t.Lit), 10, 64)
}

// UTF8Rune decodes the UTF8 rune in the token literal. It returns utf8.RuneError if
// the token literal contains an invalid rune.
func (t *Token) UTF8Rune() (rune, error) {
	r, _ := utf8.DecodeRune(t.Lit)
	if r == utf8.RuneError {
		err := fmt.Errorf("Invalid rune")
		return r, err
	}
	return r, nil
}

// StringValue returns the string value of the token literal.
func (t *Token) StringValue() string {
	return string(t.Lit[1 : len(t.Lit)-1])
}

var TokMap = TokenMap{
	typeMap: []string{
		"INVALID",
		"$",
		";",
		"empty",
		"select",
		",",
		"as",
		"*",
		"from",
		"where",
		"join",
		"(",
		")",
		"order",
		"by",
		"asc",
		"desc",
		"nulls",
		"first",
		"last",
		"limit",
		"offset",
		"partition",
		"between",
		"and",
		"rows",
		"range",
		"unbounded",
		"preceding",
		"following",
		"current",
		"row",
		"interval",
		"to",
		"like",
		"not",
		"in",
		"is",
		"or",
		".",
		"+",
		"-",
		"~",
		"/",
		"integer_literal",
		"string_literal",
		"floating_point_literal",
		"bytes_literal",
		"boolean_literal",
		"identifier",
		"date",
		"numeric_or_decimal",
		"extract",
		"tablesample",
		"percent",
		"with",
		"weight",
		"repeatable",
		"cast",
		"@",
		"format",
		"at",
		"time",
		"zone",
		"on",
		"using",
		"cross",
		"full",
		"inner",
		"left",
		"right",
		"outer",
		"distinct",
		"ignore",
		"respect",
		"over",
		"safe_cast",
		"all",
		"array",
		"bignumeric_or_bigdecimal",
		"case",
		"comment",
		"datetime",
		"else",
		"end",
		"except",
		"group",
		"having",
		"intersect",
		"null",
		"qualify",
		"replace",
		"struct",
		"then",
		"timestamp",
		"union",
		"unnest",
		"when",
		"window",
	},

	idMap: map[string]Type{
		"INVALID":                  0,
		"$":                        1,
		";":                        2,
		"empty":                    3,
		"select":                   4,
		",":                        5,
		"as":                       6,
		"*":                        7,
		"from":                     8,
		"where":                    9,
		"join":                     10,
		"(":                        11,
		")":                        12,
		"order":                    13,
		"by":                       14,
		"asc":                      15,
		"desc":                     16,
		"nulls":                    17,
		"first":                    18,
		"last":                     19,
		"limit":                    20,
		"offset":                   21,
		"partition":                22,
		"between":                  23,
		"and":                      24,
		"rows":                     25,
		"range":                    26,
		"unbounded":                27,
		"preceding":                28,
		"following":                29,
		"current":                  30,
		"row":                      31,
		"interval":                 32,
		"to":                       33,
		"like":                     34,
		"not":                      35,
		"in":                       36,
		"is":                       37,
		"or":                       38,
		".":                        39,
		"+":                        40,
		"-":                        41,
		"~":                        42,
		"/":                        43,
		"integer_literal":          44,
		"string_literal":           45,
		"floating_point_literal":   46,
		"bytes_literal":            47,
		"boolean_literal":          48,
		"identifier":               49,
		"date":                     50,
		"numeric_or_decimal":       51,
		"extract":                  52,
		"tablesample":              53,
		"percent":                  54,
		"with":                     55,
		"weight":                   56,
		"repeatable":               57,
		"cast":                     58,
		"@":                        59,
		"format":                   60,
		"at":                       61,
		"time":                     62,
		"zone":                     63,
		"on":                       64,
		"using":                    65,
		"cross":                    66,
		"full":                     67,
		"inner":                    68,
		"left":                     69,
		"right":                    70,
		"outer":                    71,
		"distinct":                 72,
		"ignore":                   73,
		"respect":                  74,
		"over":                     75,
		"safe_cast":                76,
		"all":                      77,
		"array":                    78,
		"bignumeric_or_bigdecimal": 79,
		"case":                     80,
		"comment":                  81,
		"datetime":                 82,
		"else":                     83,
		"end":                      84,
		"except":                   85,
		"group":                    86,
		"having":                   87,
		"intersect":                88,
		"null":                     89,
		"qualify":                  90,
		"replace":                  91,
		"struct":                   92,
		"then":                     93,
		"timestamp":                94,
		"union":                    95,
		"unnest":                   96,
		"when":                     97,
		"window":                   98,
	},
}
