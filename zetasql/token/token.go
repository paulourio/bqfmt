// Code generated by gocc; DO NOT EDIT.

package token

import (
	"bytes"
	"fmt"
	"strconv"
	"unicode/utf8"
)

type Token struct {
	Type
	Lit []byte
	Pos
}

type Type int

const (
	INVALID Type = iota
	EOF
)

type Pos struct {
	Offset  int
	Line    int
	Column  int
	Context Context
}

func (p Pos) String() string {
	// If the context provides a filename, provide a human-readable File:Line:Column representation.
	switch src := p.Context.(type) {
	case Sourcer:
		return fmt.Sprintf("%s:%d:%d", src.Source(), p.Line, p.Column)
	default:
		return fmt.Sprintf("Pos(offset=%d, line=%d, column=%d)", p.Offset, p.Line, p.Column)
	}
}

type TokenMap struct {
	typeMap []string
	idMap   map[string]Type
}

func (m TokenMap) Id(tok Type) string {
	if int(tok) < len(m.typeMap) {
		return m.typeMap[tok]
	}
	return "unknown"
}

func (m TokenMap) Type(tok string) Type {
	if typ, exist := m.idMap[tok]; exist {
		return typ
	}
	return INVALID
}

func (m TokenMap) TokenString(tok *Token) string {
	return fmt.Sprintf("%s(%d,%s)", m.Id(tok.Type), tok.Type, tok.Lit)
}

func (m TokenMap) StringType(typ Type) string {
	return fmt.Sprintf("%s(%d)", m.Id(typ), typ)
}

// Equals returns returns true if the token Type and Lit are matches.
func (t *Token) Equals(rhs interface{}) bool {
	switch rhsT := rhs.(type) {
	case *Token:
		return t == rhsT || (t.Type == rhsT.Type && bytes.Equal(t.Lit, rhsT.Lit))
	default:
		return false
	}
}

// CharLiteralValue returns the string value of the char literal.
func (t *Token) CharLiteralValue() string {
	return string(t.Lit[1 : len(t.Lit)-1])
}

// Float32Value returns the float32 value of the token or an error if the token literal does not
// denote a valid float32.
func (t *Token) Float32Value() (float32, error) {
	if v, err := strconv.ParseFloat(string(t.Lit), 32); err != nil {
		return 0, err
	} else {
		return float32(v), nil
	}
}

// Float64Value returns the float64 value of the token or an error if the token literal does not
// denote a valid float64.
func (t *Token) Float64Value() (float64, error) {
	return strconv.ParseFloat(string(t.Lit), 64)
}

// IDValue returns the string representation of an identifier token.
func (t *Token) IDValue() string {
	return string(t.Lit)
}

// Int32Value returns the int32 value of the token or an error if the token literal does not
// denote a valid float64.
func (t *Token) Int32Value() (int32, error) {
	if v, err := strconv.ParseInt(string(t.Lit), 10, 64); err != nil {
		return 0, err
	} else {
		return int32(v), nil
	}
}

// Int64Value returns the int64 value of the token or an error if the token literal does not
// denote a valid float64.
func (t *Token) Int64Value() (int64, error) {
	return strconv.ParseInt(string(t.Lit), 10, 64)
}

// UTF8Rune decodes the UTF8 rune in the token literal. It returns utf8.RuneError if
// the token literal contains an invalid rune.
func (t *Token) UTF8Rune() (rune, error) {
	r, _ := utf8.DecodeRune(t.Lit)
	if r == utf8.RuneError {
		err := fmt.Errorf("Invalid rune")
		return r, err
	}
	return r, nil
}

// StringValue returns the string value of the token literal.
func (t *Token) StringValue() string {
	return string(t.Lit[1 : len(t.Lit)-1])
}

var TokMap = TokenMap{
	typeMap: []string{
		"INVALID",
		"$",
		";",
		"empty",
		",",
		"select",
		"(",
		")",
		"union",
		"except",
		"intersect",
		"as",
		".*",
		"*",
		"replace",
		"with",
		"where",
		"all",
		"distinct",
		"struct",
		"from",
		"join",
		"group",
		"by",
		"rollup",
		"having",
		"qualify",
		"window",
		"unnest",
		"offset",
		"order",
		"asc",
		"desc",
		"nulls",
		"first",
		"last",
		"limit",
		"partition",
		"between",
		"and",
		"rows",
		"range",
		"unbounded",
		"preceding",
		"following",
		"current",
		"row",
		"interval",
		"to",
		"array",
		"<",
		">",
		"or",
		"not",
		"|",
		"^",
		"&",
		"[",
		"]",
		".",
		"like",
		"in",
		"is",
		"+",
		"-",
		"~",
		"/",
		"||",
		"<<",
		">>",
		"integer_literal",
		"string_literal",
		"floating_point_literal",
		"bytes_literal",
		"boolean_literal",
		"null",
		"numeric",
		"decimal",
		"bignumeric",
		"bigdecimal",
		"date",
		"datetime",
		"time",
		"timestamp",
		"json",
		"identifier",
		"abort",
		"access",
		"action",
		"aggregate",
		"add",
		"alter",
		"anonymization",
		"analyze",
		"assert",
		"batch",
		"begin",
		"break",
		"call",
		"cascade",
		"check",
		"clamped",
		"clone",
		"copy",
		"cluster",
		"column",
		"columns",
		"commit",
		"connection",
		"constant",
		"constraint",
		"continue",
		"data",
		"database",
		"declare",
		"definer",
		"delete",
		"describe",
		"deterministic",
		"do",
		"drop",
		"elseif",
		"enforced",
		"error_",
		"exception",
		"execute",
		"explain",
		"export",
		"external",
		"files",
		"filter",
		"filter_fields",
		"fill",
		"foreign",
		"format",
		"function",
		"generated",
		"grant",
		"group_rows",
		"hidden",
		"immediate",
		"immutable",
		"import_",
		"include",
		"index",
		"insert",
		"inout",
		"invoker",
		"isolation",
		"iterate",
		"key",
		"language",
		"leave",
		"level",
		"load",
		"loop",
		"match",
		"matched",
		"materialized",
		"max",
		"message",
		"min",
		"model",
		"module",
		"only",
		"options",
		"out",
		"overwrite",
		"percent",
		"pivot",
		"policies",
		"policy",
		"primary",
		"private",
		"privilege",
		"privileges",
		"procedure",
		"public",
		"raise",
		"read",
		"references",
		"remote",
		"remove",
		"rename",
		"repeat",
		"repeatable",
		"replace_fields",
		"restrict",
		"restriction",
		"returns",
		"return",
		"revoke",
		"rollback",
		"run",
		"safe_cast",
		"schema",
		"search",
		"security",
		"show",
		"simple",
		"snapshot",
		"source",
		"sql",
		"stable",
		"start",
		"stored",
		"storing",
		"system",
		"system_time",
		"table",
		"target",
		"temp",
		"temporary",
		"transaction",
		"transform",
		"truncate",
		"type",
		"unique",
		"unpivot",
		"until",
		"update",
		"value",
		"values",
		"view",
		"views",
		"volatile",
		"weight",
		"while",
		"write",
		"zone",
		"descriptor",
		"exists",
		"tablesample",
		"cast",
		"@",
		"at",
		"on",
		"using",
		"cross",
		"full",
		"inner",
		"left",
		"right",
		"outer",
		"ignore",
		"respect",
		"over",
		"end",
		"else",
		"case",
		"when",
		"then",
		"=",
		"!=",
		"<>",
		"<=",
		">=",
		"comment",
		"extract",
		"illegal_character",
		"missing_whitespace_float_and_alias",
		"missing_whitespace_hex_and_alias",
		"missing_whitespace_int_and_alias",
		"proto",
		"unterminated_bytes_literal",
		"unterminated_comment",
		"unterminated_escaped_identifier",
		"unterminated_raw_bytes_literal",
		"unterminated_raw_string_literal",
		"unterminated_string_literal",
		"unterminated_triple_quoted_bytes_literal",
		"unterminated_triple_quoted_raw_bytes_literal",
		"unterminated_triple_quoted_raw_string_literal",
		"unterminated_triple_quoted_string_literal",
	},

	idMap: map[string]Type{
		"INVALID":                            0,
		"$":                                  1,
		";":                                  2,
		"empty":                              3,
		",":                                  4,
		"select":                             5,
		"(":                                  6,
		")":                                  7,
		"union":                              8,
		"except":                             9,
		"intersect":                          10,
		"as":                                 11,
		".*":                                 12,
		"*":                                  13,
		"replace":                            14,
		"with":                               15,
		"where":                              16,
		"all":                                17,
		"distinct":                           18,
		"struct":                             19,
		"from":                               20,
		"join":                               21,
		"group":                              22,
		"by":                                 23,
		"rollup":                             24,
		"having":                             25,
		"qualify":                            26,
		"window":                             27,
		"unnest":                             28,
		"offset":                             29,
		"order":                              30,
		"asc":                                31,
		"desc":                               32,
		"nulls":                              33,
		"first":                              34,
		"last":                               35,
		"limit":                              36,
		"partition":                          37,
		"between":                            38,
		"and":                                39,
		"rows":                               40,
		"range":                              41,
		"unbounded":                          42,
		"preceding":                          43,
		"following":                          44,
		"current":                            45,
		"row":                                46,
		"interval":                           47,
		"to":                                 48,
		"array":                              49,
		"<":                                  50,
		">":                                  51,
		"or":                                 52,
		"not":                                53,
		"|":                                  54,
		"^":                                  55,
		"&":                                  56,
		"[":                                  57,
		"]":                                  58,
		".":                                  59,
		"like":                               60,
		"in":                                 61,
		"is":                                 62,
		"+":                                  63,
		"-":                                  64,
		"~":                                  65,
		"/":                                  66,
		"||":                                 67,
		"<<":                                 68,
		">>":                                 69,
		"integer_literal":                    70,
		"string_literal":                     71,
		"floating_point_literal":             72,
		"bytes_literal":                      73,
		"boolean_literal":                    74,
		"null":                               75,
		"numeric":                            76,
		"decimal":                            77,
		"bignumeric":                         78,
		"bigdecimal":                         79,
		"date":                               80,
		"datetime":                           81,
		"time":                               82,
		"timestamp":                          83,
		"json":                               84,
		"identifier":                         85,
		"abort":                              86,
		"access":                             87,
		"action":                             88,
		"aggregate":                          89,
		"add":                                90,
		"alter":                              91,
		"anonymization":                      92,
		"analyze":                            93,
		"assert":                             94,
		"batch":                              95,
		"begin":                              96,
		"break":                              97,
		"call":                               98,
		"cascade":                            99,
		"check":                              100,
		"clamped":                            101,
		"clone":                              102,
		"copy":                               103,
		"cluster":                            104,
		"column":                             105,
		"columns":                            106,
		"commit":                             107,
		"connection":                         108,
		"constant":                           109,
		"constraint":                         110,
		"continue":                           111,
		"data":                               112,
		"database":                           113,
		"declare":                            114,
		"definer":                            115,
		"delete":                             116,
		"describe":                           117,
		"deterministic":                      118,
		"do":                                 119,
		"drop":                               120,
		"elseif":                             121,
		"enforced":                           122,
		"error_":                             123,
		"exception":                          124,
		"execute":                            125,
		"explain":                            126,
		"export":                             127,
		"external":                           128,
		"files":                              129,
		"filter":                             130,
		"filter_fields":                      131,
		"fill":                               132,
		"foreign":                            133,
		"format":                             134,
		"function":                           135,
		"generated":                          136,
		"grant":                              137,
		"group_rows":                         138,
		"hidden":                             139,
		"immediate":                          140,
		"immutable":                          141,
		"import_":                            142,
		"include":                            143,
		"index":                              144,
		"insert":                             145,
		"inout":                              146,
		"invoker":                            147,
		"isolation":                          148,
		"iterate":                            149,
		"key":                                150,
		"language":                           151,
		"leave":                              152,
		"level":                              153,
		"load":                               154,
		"loop":                               155,
		"match":                              156,
		"matched":                            157,
		"materialized":                       158,
		"max":                                159,
		"message":                            160,
		"min":                                161,
		"model":                              162,
		"module":                             163,
		"only":                               164,
		"options":                            165,
		"out":                                166,
		"overwrite":                          167,
		"percent":                            168,
		"pivot":                              169,
		"policies":                           170,
		"policy":                             171,
		"primary":                            172,
		"private":                            173,
		"privilege":                          174,
		"privileges":                         175,
		"procedure":                          176,
		"public":                             177,
		"raise":                              178,
		"read":                               179,
		"references":                         180,
		"remote":                             181,
		"remove":                             182,
		"rename":                             183,
		"repeat":                             184,
		"repeatable":                         185,
		"replace_fields":                     186,
		"restrict":                           187,
		"restriction":                        188,
		"returns":                            189,
		"return":                             190,
		"revoke":                             191,
		"rollback":                           192,
		"run":                                193,
		"safe_cast":                          194,
		"schema":                             195,
		"search":                             196,
		"security":                           197,
		"show":                               198,
		"simple":                             199,
		"snapshot":                           200,
		"source":                             201,
		"sql":                                202,
		"stable":                             203,
		"start":                              204,
		"stored":                             205,
		"storing":                            206,
		"system":                             207,
		"system_time":                        208,
		"table":                              209,
		"target":                             210,
		"temp":                               211,
		"temporary":                          212,
		"transaction":                        213,
		"transform":                          214,
		"truncate":                           215,
		"type":                               216,
		"unique":                             217,
		"unpivot":                            218,
		"until":                              219,
		"update":                             220,
		"value":                              221,
		"values":                             222,
		"view":                               223,
		"views":                              224,
		"volatile":                           225,
		"weight":                             226,
		"while":                              227,
		"write":                              228,
		"zone":                               229,
		"descriptor":                         230,
		"exists":                             231,
		"tablesample":                        232,
		"cast":                               233,
		"@":                                  234,
		"at":                                 235,
		"on":                                 236,
		"using":                              237,
		"cross":                              238,
		"full":                               239,
		"inner":                              240,
		"left":                               241,
		"right":                              242,
		"outer":                              243,
		"ignore":                             244,
		"respect":                            245,
		"over":                               246,
		"end":                                247,
		"else":                               248,
		"case":                               249,
		"when":                               250,
		"then":                               251,
		"=":                                  252,
		"!=":                                 253,
		"<>":                                 254,
		"<=":                                 255,
		">=":                                 256,
		"comment":                            257,
		"extract":                            258,
		"illegal_character":                  259,
		"missing_whitespace_float_and_alias": 260,
		"missing_whitespace_hex_and_alias":   261,
		"missing_whitespace_int_and_alias":   262,
		"proto":                              263,
		"unterminated_bytes_literal":         264,
		"unterminated_comment":               265,
		"unterminated_escaped_identifier":    266,
		"unterminated_raw_bytes_literal":     267,
		"unterminated_raw_string_literal":    268,
		"unterminated_string_literal":        269,
		"unterminated_triple_quoted_bytes_literal":      270,
		"unterminated_triple_quoted_raw_bytes_literal":  271,
		"unterminated_triple_quoted_raw_string_literal": 272,
		"unterminated_triple_quoted_string_literal":     273,
	},
}
