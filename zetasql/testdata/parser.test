
SELECT 1
--
QueryStatement [0-8]
  Query [0-8]
    Select [0-8]
      SelectList [7-8]
        SelectColumn [7-8]
          IntLiteral(1) [7-8]
--
SELECT
  1
==

select 1; # NBSP
--
QueryStatement [0-9]
  Query [0-9]
    Select [0-9]
      SelectList [8-9]
        SelectColumn [8-9]
          IntLiteral(1) [8-9]
--
SELECT
  1
==

select
# full line comment
/* block
   comment */
-- full line comment
1# partial line comment
+-- partial line comment
2/*partial line block comment*/+3;
--
QueryStatement [0-153]
  Query [0-153]
    Select [0-153]
      SelectList [71-153]
        SelectColumn [71-153]
          BinaryExpression(+) [71-153]
            BinaryExpression(+) [71-121]
              IntLiteral(1) [71-72]
              IntLiteral(2) [120-121]
            IntLiteral(3) [152-153]
--
SELECT
  1 + 2 + 3
==

SELECT 1 + 2 + 3
--
QueryStatement [0-16]
  Query [0-16]
    Select [0-16]
      SelectList [7-16]
        SelectColumn [7-16]
          BinaryExpression(+) [7-16]
            BinaryExpression(+) [7-12]
              IntLiteral(1) [7-8]
              IntLiteral(2) [11-12]
            IntLiteral(3) [15-16]
--
SELECT
  1 + 2 + 3
==

Select 1 * 2 + 3
--
QueryStatement [0-16]
  Query [0-16]
    Select [0-16]
      SelectList [7-16]
        SelectColumn [7-16]
          BinaryExpression(+) [7-16]
            BinaryExpression(*) [7-12]
              IntLiteral(1) [7-8]
              IntLiteral(2) [11-12]
            IntLiteral(3) [15-16]
--
SELECT
  1 * 2 + 3
==

Select 1 + 2 * 3 + 4 + 4 * 6 * 7 + 8
--
QueryStatement [0-36]
  Query [0-36]
    Select [0-36]
      SelectList [7-36]
        SelectColumn [7-36]
          BinaryExpression(+) [7-36]
            BinaryExpression(+) [7-32]
              BinaryExpression(+) [7-20]
                BinaryExpression(+) [7-16]
                  IntLiteral(1) [7-8]
                  BinaryExpression(*) [11-16]
                    IntLiteral(2) [11-12]
                    IntLiteral(3) [15-16]
                IntLiteral(4) [19-20]
              BinaryExpression(*) [23-32]
                BinaryExpression(*) [23-28]
                  IntLiteral(4) [23-24]
                  IntLiteral(6) [27-28]
                IntLiteral(7) [31-32]
            IntLiteral(8) [35-36]
--
SELECT
  1 + 2 * 3 + 4 + 4 * 6 * 7 + 8
==

select--comment
--comment
1 -- comment
+--
2--comment
--
QueryStatement [0-44]
  Query [0-44]
    Select [0-44]
      SelectList [26-44]
        SelectColumn [26-44]
          BinaryExpression(+) [26-44]
            IntLiteral(1) [26-27]
            IntLiteral(2) [43-44]
--
SELECT
  1 + 2
==

# "--" with no space.
select --
5
--
QueryStatement [22-33]
  Query [22-33]
    Select [22-33]
      SelectList [32-33]
        SelectColumn [32-33]
          IntLiteral(5) [32-33]
--
SELECT
  5
==

# "-- " with a space.
select --
5
--
QueryStatement [22-33]
  Query [22-33]
    Select [22-33]
      SelectList [32-33]
        SelectColumn [32-33]
          IntLiteral(5) [32-33]
--
SELECT
  5
==

select --- 1
2
--
QueryStatement [0-14]
  Query [0-14]
    Select [0-14]
      SelectList [13-14]
        SelectColumn [13-14]
          IntLiteral(2) [13-14]
--
SELECT
  2
==

select - - 1
--
QueryStatement [0-12]
  Query [0-12]
    Select [0-12]
      SelectList [7-12]
        SelectColumn [7-12]
          UnaryExpression(-) [7-12]
            UnaryExpression(-) [9-12]
              IntLiteral(1) [11-12]
--
SELECT
  - -1
==

select - - - - - - - 1
--
QueryStatement [0-22]
  Query [0-22]
    Select [0-22]
      SelectList [7-22]
        SelectColumn [7-22]
          UnaryExpression(-) [7-22]
            UnaryExpression(-) [9-22]
              UnaryExpression(-) [11-22]
                UnaryExpression(-) [13-22]
                  UnaryExpression(-) [15-22]
                    UnaryExpression(-) [17-22]
                      UnaryExpression(-) [19-22]
                        IntLiteral(1) [21-22]
--
SELECT
  - - - - - - -1
==

# No comments inside strings.
select "abc -- def",
       "abc # def",
       "abc /* def */ ghi"
--
QueryStatement [30-97]
  Query [30-97]
    Select [30-97]
      SelectList [37-97]
        SelectColumn [37-49]
          StringLiteral("abc -- def") [37-49]
        SelectColumn [58-69]
          StringLiteral("abc # def") [58-69]
        SelectColumn [78-97]
          StringLiteral("abc /* def */ ghi") [78-97]
--
SELECT
  "abc -- def",
  "abc # def",
  "abc /* def */ ghi"
==

select /* no nested comments # -- /* */ 1;
--
QueryStatement [0-41]
  Query [0-41]
    Select [0-41]
      SelectList [40-41]
        SelectColumn [40-41]
          IntLiteral(1) [40-41]
--
SELECT
  1
==

select f1, f2 from T
--
QueryStatement [0-20]
  Query [0-20]
    Select [0-20]
      SelectList [7-13]
        SelectColumn [7-9]
          PathExpression [7-9]
            Identifier(f1) [7-9]
        SelectColumn [11-13]
          PathExpression [11-13]
            Identifier(f2) [11-13]
      FromClause [14-20]
        TablePathExpression [19-20]
          PathExpression [19-20]
            Identifier(T) [19-20]
--
SELECT
  f1,
  f2
FROM
  T
==

select f1, `f 2` from T where b;
--
QueryStatement [0-31]
  Query [0-31]
    Select [0-31]
      SelectList [7-16]
        SelectColumn [7-9]
          PathExpression [7-9]
            Identifier(f1) [7-9]
        SelectColumn [11-16]
          PathExpression [11-16]
            Identifier(`f 2`) [11-16]
      FromClause [17-23]
        TablePathExpression [22-23]
          PathExpression [22-23]
            Identifier(T) [22-23]
      WhereClause [24-31]
        PathExpression [30-31]
          Identifier(b) [30-31]
--
SELECT
  f1,
  `f 2`
FROM
  T
WHERE
  b
==

select f1 from (select 1 f1) AS subquery_alias_1, (select 1 f1) subquery_alias_2
--
QueryStatement [0-80]
  Query [0-80]
    Select [0-80]
      SelectList [7-9]
        SelectColumn [7-9]
          PathExpression [7-9]
            Identifier(f1) [7-9]
      FromClause [10-80]
        Join(COMMA) [48-80]
          TableSubquery [15-48]
            Query [16-27]
              Select [16-27]
                SelectList [23-27]
                  SelectColumn [23-27]
                    IntLiteral(1) [23-24]
                    Alias [25-27]
                      Identifier(f1) [25-27]
            Alias [29-48]
              Identifier(subquery_alias_1) [32-48]
          TableSubquery [50-80]
            Query [51-62]
              Select [51-62]
                SelectList [58-62]
                  SelectColumn [58-62]
                    IntLiteral(1) [58-59]
                    Alias [60-62]
                      Identifier(f1) [60-62]
            Alias [64-80]
              Identifier(subquery_alias_2) [64-80]
--
SELECT
  f1
FROM
  (
    SELECT
      1 AS f1
  ) AS subquery_alias_1,
  (
    SELECT
      1 AS f1
  ) AS subquery_alias_2
==

select hll_count.extract(hll_count.merge(foo)) from bar;
--
QueryStatement [0-55]
  Query [0-55]
    Select [0-55]
      SelectList [7-46]
        SelectColumn [7-46]
          FunctionCall [7-46]
            PathExpression [7-24]
              Identifier(hll_count) [7-16]
              Identifier(`extract`) [17-24]
            FunctionCall [25-45]
              PathExpression [25-40]
                Identifier(hll_count) [25-34]
                Identifier(`merge`) [35-40]
              PathExpression [41-44]
                Identifier(foo) [41-44]
      FromClause [47-55]
        TablePathExpression [52-55]
          PathExpression [52-55]
            Identifier(bar) [52-55]
--
SELECT
  hll_count.`extract`(hll_count.`merge`(foo))
FROM
  bar
==

select a AND b from T;
--
QueryStatement [0-21]
  Query [0-21]
    Select [0-21]
      SelectList [7-14]
        SelectColumn [7-14]
          AndExpr [7-14]
            PathExpression [7-8]
              Identifier(a) [7-8]
            PathExpression [13-14]
              Identifier(b) [13-14]
      FromClause [15-21]
        TablePathExpression [20-21]
          PathExpression [20-21]
            Identifier(T) [20-21]
--
SELECT
  a AND b
FROM
  T
==

select f(x + y) from A;
--
QueryStatement [0-22]
  Query [0-22]
    Select [0-22]
      SelectList [7-15]
        SelectColumn [7-15]
          FunctionCall [7-15]
            PathExpression [7-8]
              Identifier(f) [7-8]
            BinaryExpression(+) [9-14]
              PathExpression [9-10]
                Identifier(x) [9-10]
              PathExpression [13-14]
                Identifier(y) [13-14]
      FromClause [16-22]
        TablePathExpression [21-22]
          PathExpression [21-22]
            Identifier(A) [21-22]
--
SELECT
  f(x + y)
FROM
  A
==

select count(abc.def), count(*), anon_count(*, 0, 1) from T;
--
QueryStatement [0-59]
  Query [0-59]
    Select [0-59]
      SelectList [7-52]
        SelectColumn [7-21]
          FunctionCall [7-21]
            PathExpression [7-12]
              Identifier(count) [7-12]
            PathExpression [13-20]
              Identifier(abc) [13-16]
              Identifier(def) [17-20]
        SelectColumn [23-31]
          FunctionCall [23-31]
            PathExpression [23-28]
              Identifier(count) [23-28]
            Star(*) [29-30]
        SelectColumn [33-52]
          FunctionCall [33-52]
            PathExpression [33-43]
              Identifier(anon_count) [33-43]
            Star(*) [44-45]
            IntLiteral(0) [47-48]
            IntLiteral(1) [50-51]
      FromClause [53-59]
        TablePathExpression [58-59]
          PathExpression [58-59]
            Identifier(T) [58-59]
--
SELECT
  count(abc.def),
  count(*),
  anon_count(*, 0, 1)
FROM
  T
==

select a.b.f(x.y) from T;
--
QueryStatement [0-24]
  Query [0-24]
    Select [0-24]
      SelectList [7-17]
        SelectColumn [7-17]
          FunctionCall [7-17]
            PathExpression [7-12]
              Identifier(a) [7-8]
              Identifier(b) [9-10]
              Identifier(f) [11-12]
            PathExpression [13-16]
              Identifier(x) [13-14]
              Identifier(y) [15-16]
      FromClause [18-24]
        TablePathExpression [23-24]
          PathExpression [23-24]
            Identifier(T) [23-24]
--
SELECT
  a.b.f(x.y)
FROM
  T
==

select *, a.b.f(x.y) from T;
--
QueryStatement [0-27]
  Query [0-27]
    Select [0-27]
      SelectList [7-20]
        SelectColumn [7-8]
          Star(*) [7-8]
        SelectColumn [10-20]
          FunctionCall [10-20]
            PathExpression [10-15]
              Identifier(a) [10-11]
              Identifier(b) [12-13]
              Identifier(f) [14-15]
            PathExpression [16-19]
              Identifier(x) [16-17]
              Identifier(y) [18-19]
      FromClause [21-27]
        TablePathExpression [26-27]
          PathExpression [26-27]
            Identifier(T) [26-27]
--
SELECT
  *,
  a.b.f(x.y)
FROM
  T
==

select f(g(x)), f(1), h() AS foo from T;
--
QueryStatement [0-39]
  Query [0-39]
    Select [0-39]
      SelectList [7-32]
        SelectColumn [7-14]
          FunctionCall [7-14]
            PathExpression [7-8]
              Identifier(f) [7-8]
            FunctionCall [9-13]
              PathExpression [9-10]
                Identifier(g) [9-10]
              PathExpression [11-12]
                Identifier(x) [11-12]
        SelectColumn [16-20]
          FunctionCall [16-20]
            PathExpression [16-17]
              Identifier(f) [16-17]
            IntLiteral(1) [18-19]
        SelectColumn [22-32]
          FunctionCall [22-25]
            PathExpression [22-23]
              Identifier(h) [22-23]
          Alias [26-32]
            Identifier(foo) [29-32]
      FromClause [33-39]
        TablePathExpression [38-39]
          PathExpression [38-39]
            Identifier(T) [38-39]
--
SELECT
  f(g(x)),
  f(1),
  h() AS foo
FROM
  T
==

select f(1, x, "a", true, g(y)) AS bar from T;
--
QueryStatement [0-45]
  Query [0-45]
    Select [0-45]
      SelectList [7-38]
        SelectColumn [7-38]
          FunctionCall [7-31]
            PathExpression [7-8]
              Identifier(f) [7-8]
            IntLiteral(1) [9-10]
            PathExpression [12-13]
              Identifier(x) [12-13]
            StringLiteral("a") [15-18]
            BooleanLiteral(true) [20-24]
            FunctionCall [26-30]
              PathExpression [26-27]
                Identifier(g) [26-27]
              PathExpression [28-29]
                Identifier(y) [28-29]
          Alias [32-38]
            Identifier(bar) [35-38]
      FromClause [39-45]
        TablePathExpression [44-45]
          PathExpression [44-45]
            Identifier(T) [44-45]
--
SELECT
  f(1, x, "a", true, g(y)) AS bar
FROM
  T
==

select -1, +2, NOT a from T;
--
QueryStatement [0-27]
  Query [0-27]
    Select [0-27]
      SelectList [7-20]
        SelectColumn [7-9]
          UnaryExpression(-) [7-9]
            IntLiteral(1) [8-9]
        SelectColumn [11-13]
          UnaryExpression(+) [11-13]
            IntLiteral(2) [12-13]
        SelectColumn [15-20]
          UnaryExpression(NOT) [15-20]
            PathExpression [19-20]
              Identifier(a) [19-20]
      FromClause [21-27]
        TablePathExpression [26-27]
          PathExpression [26-27]
            Identifier(T) [26-27]
--
SELECT
  -1,
  +2,
  NOT a
FROM
  T
==

select 1 as `This is an\\n\\talias on a new line.`
--
QueryStatement [0-50]
  Query [0-50]
    Select [0-50]
      SelectList [7-50]
        SelectColumn [7-50]
          IntLiteral(1) [7-8]
          Alias [9-50]
            Identifier(`This is an\\n\\talias on a new line.`) [12-50]
--
SELECT
  1 AS `This is an\\n\\talias on a new line.`
==

select 1 as `\\t`, 2 as `\\n`, 3 as `\\010`, 4 as `\\xafh`, 5 as `\\u00045678`,
       6 as `\\U00045678`, '\\x53' as `\\x54`;
--
QueryStatement [0-125]
  Query [0-125]
    Select [0-125]
      SelectList [7-125]
        SelectColumn [7-17]
          IntLiteral(1) [7-8]
          Alias [9-17]
            Identifier(`\\t`) [12-17]
        SelectColumn [19-29]
          IntLiteral(2) [19-20]
          Alias [21-29]
            Identifier(`\\n`) [24-29]
        SelectColumn [31-43]
          IntLiteral(3) [31-32]
          Alias [33-43]
            Identifier(`\\010`) [36-43]
        SelectColumn [45-58]
          IntLiteral(4) [45-46]
          Alias [47-58]
            Identifier(`\\xafh`) [50-58]
        SelectColumn [60-78]
          IntLiteral(5) [60-61]
          Alias [62-78]
            Identifier(`\\u00045678`) [65-78]
        SelectColumn [87-105]
          IntLiteral(6) [87-88]
          Alias [89-105]
            Identifier(`\\U00045678`) [92-105]
        SelectColumn [107-125]
          StringLiteral('\\x53') [107-114]
          Alias [115-125]
            Identifier(`\\x54`) [118-125]
--
SELECT
  1 AS `\\t`,
  2 AS `\\n`,
  3 AS `\\010`,
  4 AS `\\xafh`,
  5 AS `\\u00045678`,
  6 AS `\\U00045678`,
  '\\x53' AS `\\x54`
==

select '\\u1235' as `\\u1234`, "\\U00012346" as `\\U00012345`;
--
QueryStatement [0-61]
  Query [0-61]
    Select [0-61]
      SelectList [7-61]
        SelectColumn [7-29]
          StringLiteral('\\u1235') [7-16]
          Alias [17-29]
            Identifier(`\\u1234`) [20-29]
        SelectColumn [31-61]
          StringLiteral("\\U00012346") [31-44]
          Alias [45-61]
            Identifier(`\\U00012345`) [48-61]
--
SELECT
  '\\u1235' AS `\\u1234`,
  "\\U00012346" AS `\\U00012345`
==

select safe_cast("1" as int32);
--
QueryStatement [0-30]
  Query [0-30]
    Select [0-30]
      SelectList [7-30]
        SelectColumn [7-30]
          CastExpression(return_null_on_error=true) [7-30]
            StringLiteral("1") [17-20]
            NamedType [24-29]
              PathExpression [24-29]
                Identifier(int32) [24-29]
--
SELECT
  SAFE_CAST("1" AS int32)
==

select cast("1" as int32);
--
QueryStatement [0-25]
  Query [0-25]
    Select [0-25]
      SelectList [7-25]
        SelectColumn [7-25]
          CastExpression [7-25]
            StringLiteral("1") [12-15]
            NamedType [19-24]
              PathExpression [19-24]
                Identifier(int32) [19-24]
--
SELECT
  CAST("1" AS int32)
==

select cast(x as string(10));
--
QueryStatement [0-28]
  Query [0-28]
    Select [0-28]
      SelectList [7-28]
        SelectColumn [7-28]
          CastExpression [7-28]
            PathExpression [12-13]
              Identifier(x) [12-13]
            NamedType [17-27]
              PathExpression [17-23]
                Identifier(string) [17-23]
              TypeParameterList [23-27]
                IntLiteral(10) [24-26]
--
SELECT
  CAST(x AS string(10))
==
