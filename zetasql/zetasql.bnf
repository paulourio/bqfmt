/* Lexical part */

/* String and bytes literals */
string_literal: [_raw_string_prefix](_sqtext|_sq3text|_dqtext|_dq3text) ;
bytes_literal:  (_bytes_prefix|_raw_bytes_prefix)(_sqtext|_sq3text|_dqtext|_dq3text) ;

unterminated_string_literal:                    _sqtext_0|_dqtext_0 ;
unterminated_triple_quoted_string_literal:      _sq3text_0|_dq3text_0 ;
unterminated_raw_string_literal:                _raw_string_prefix(_sqtext_0|_dqtext_0) ;
unterminated_triple_quoted_raw_string_literal:  _raw_string_prefix(_sq3text_0|_dq3text_0) ;
unterminated_bytes_literal:                     _bytes_prefix(_sqtext_0|_dqtext_0) ;
unterminated_raw_bytes_literal:                 _raw_bytes_prefix(_sqtext_0|_dqtext_0) ;
unterminated_triple_quoted_bytes_literal:       _bytes_prefix(_sq3text_0|_dq3text_0) ;
unterminated_triple_quoted_raw_bytes_literal:   _raw_bytes_prefix(_sq3text_0|_dq3text_0) ;

/*
    The abbreviations here:
      sq = single quote
      dq = double quote
      bq = backtick quote
      3  = triple quote
      _0 = unterminated versions.  They are used to return better error
            messages for unterminated strings and bytes.

    Here we accept arbitrary escapes instead of trying to narrowing it
    down just the valid set.  The actual validation of the escapes, and
    of things like UTF-8 structure, is done in the parser.
 */
_sqtext:      _sqtext_0 _sq ;
_sqtext_0:    _sq{(_no_backslash_sq_newline|_any_escape)} ;
_dqtext:      _dqtext_0 _dq ;
_dqtext_0:    _dq{(_no_backslash_dq_newline|_any_escape)} ;
_sq3text:     _sq3text_0 _sq3 ;
_sq3text_0:   _sq3{[(_sq|(_sq _sq))](_no_backslash_sq|_any_escape)} ;
_dq3text:     _dq3text_0 _dq3 ;
_dq3text_0:   _dq3{[(_dq|(_dq _dq))](_no_backslash_dq|_any_escape)} ;

_any_escape:              '\\'(_ascii_char|'"'|'\''|'\\'|'\n'|'\r');
_raw_string_prefix:       ('r'|'R') ;
_raw_bytes_prefix:        (('r'|'R')('b'|'B')) | (('b'|'B')('r'|'R')) ;
_bytes_prefix:            ('b'|'B') ;
_no_backslash_sq_newline: _char|'"' ;
_no_backslash_dq_newline: _char|'\'' ;
_no_backslash_sq:         _char|_dq|'\n' ;
_no_backslash_dq:         _char|_sq|'\n' ;
_sq3:                     _sq _sq _sq ;
_dq3:                     _dq _dq _dq ;
_sq:                      '\'' ;
_dq:                      '"' ;

_char:              _ascii_char|_unicode_byte ;
_ascii_char:        '\x01'-'\x09' /* skip null (0x00) */
                  | '\x0B'-'\x21' /* skip line feed (0x0A) */
                  | '\x23'-'\x26' /* skip double quote (0x22) */
                  | '\x28'-'\x5B' /* skip single quote (0x27) */
                  | '\x5D'-'\x7F' /* skip backslash (0x5C) */
                  ;
_unicode_byte:    '\u0080'-'\uFFFC'|'\uFFFE'-'\U0010FFFF' ;

/* Integer literals */
integer_literal: (_decimal_literal|_hex_literal) ;

/* Floating-point literals */
floating_point_literal: _float_literal ;

_float_literal:     _decimals'.'[_decimals][_exponent]
                  | _decimals _exponent
                  | '.'_decimals[_exponent]
                  ;
_decimals:        _decimal_digit{_decimal_digit} ;
_exponent:        ('e'|'E')['+'|'-']_decimals ;
_decimal_literal: _decimal_digit{_decimal_digit} ;
_decimal_digit:   '0'-'9' ;
_hex_literal:     '0'('x'|'X')_hex_digit{_hex_digit} ;
_hex_digit:       _decimal_digit|'a'-'f'|'A'-'F' ;

missing_whitespace_int_and_alias: _decimal_literal('a'-'z'|'A'-'Z'|'_') ;
missing_whitespace_hex_and_alias: _hex_literal('g'-'z'|'G'-'Z'|'_') ;
missing_whitespace_float_and_alias: _float_literal('a'-'z'|'A'-'Z'|'_') ;

/* Boolean literals */
boolean_literal: ('f'|'F')('a'|'A')('l'|'L')('s'|'S')('e'|'E')
               | ('t'|'T')('r'|'R')('u'|'U')('e'|'E')
               ;

/* Case-insensitive words */
abort:        ('a'|'A')('b'|'B')('o'|'O')('r'|'R')('t'|'T');
access:       ('a'|'A')('c'|'C')('c'|'C')('e'|'E')('s'|'S')('s'|'S');
action:       ('a'|'A')('c'|'C')('t'|'T')('i'|'I')('o'|'O')('n'|'N');
add:          ('a'|'A')('d'|'D')('d'|'D');
aggregate:    ('a'|'A')('g'|'G')('g'|'G')('r'|'R')('e'|'E')('g'|'G')('a'|'A')('t'|'T')('e'|'E');
all:          ('a'|'A')('l'|'L')('l'|'L');
alter:        ('a'|'A')('l'|'L')('t'|'T')('e'|'E')('r'|'R');
analyze:      ('a'|'A')('n'|'N')('a'|'A')('l'|'L')('y'|'Y')('z'|'Z')('e'|'E');
and:          ('a'|'A')('n'|'N')('d'|'D');
anonymization: ('a'|'A')('n'|'N')('o'|'O')('n'|'N')('y'|'Y')('m'|'M')('i'|'I')('z'|'Z')('a'|'A')('t'|'T')('i'|'I')('o'|'O')('n'|'N');
array:        ('a'|'A')('r'|'R')('r'|'R')('a'|'A')('y'|'Y');
as:           ('a'|'A')('s'|'S');
asc:          ('a'|'A')('s'|'S')('c'|'C');
assert:       ('a'|'A')('s'|'S')('s'|'S')('e'|'E')('r'|'R')('t'|'T');
at:           ('a'|'A')('t'|'T');
batch:        ('b'|'B')('a'|'A')('t'|'T')('c'|'C')('h'|'H');
begin:        ('b'|'B')('e'|'E')('g'|'G')('i'|'I')('n'|'N');
between:      ('b'|'B')('e'|'E')('t'|'T')('w'|'W')('e'|'E')('e'|'E')('n'|'N');
bigdecimal:   ('b'|'B')('i'|'I')('g'|'G')('d'|'D')('e'|'E')('c'|'C')('i'|'I')('m'|'M')('a'|'A')('l'|'L');
bignumeric:   ('b'|'B')('i'|'I')('g'|'G')('n'|'N')('u'|'U')('m'|'M')('e'|'E')('r'|'R')('i'|'I')('c'|'C');
break:        ('b'|'B')('r'|'R')('e'|'E')('a'|'A')('k'|'K');
by:           ('b'|'B')('y'|'Y');
call:         ('c'|'C')('a'|'A')('l'|'L')('l'|'L');
cascade:      ('c'|'C')('a'|'A')('s'|'S')('c'|'C')('a'|'A')('d'|'D')('e'|'E');
case:         ('c'|'C')('a'|'A')('s'|'S')('e'|'E');
cast:         ('c'|'C')('a'|'A')('s'|'S')('t'|'T');
check:        ('c'|'C')('h'|'H')('e'|'E')('c'|'C')('k'|'K');
clamped:      ('c'|'C')('l'|'L')('a'|'A')('m'|'M')('p'|'P')('e'|'E')('d'|'D');
clone:        ('c'|'C')('l'|'L')('o'|'O')('n'|'N')('e'|'E');
cluster:      ('c'|'C')('l'|'L')('u'|'U')('s'|'S')('t'|'T')('e'|'E')('r'|'R');
column:       ('c'|'C')('o'|'O')('l'|'L')('u'|'U')('m'|'M')('n'|'N');
columns:      ('c'|'C')('o'|'O')('l'|'L')('u'|'U')('m'|'M')('n'|'N')('s'|'S');
commit:       ('c'|'C')('o'|'O')('m'|'M')('m'|'M')('i'|'I')('t'|'T');
connection:   ('c'|'C')('o'|'O')('n'|'N')('n'|'N')('e'|'E')('c'|'C')('t'|'T')('i'|'I')('o'|'O')('n'|'N');
constant:     ('c'|'C')('o'|'O')('n'|'N')('s'|'S')('t'|'T')('a'|'A')('n'|'N')('t'|'T');
constraint:   ('c'|'C')('o'|'O')('n'|'N')('s'|'S')('t'|'T')('r'|'R')('a'|'A')('i'|'I')('n'|'N')('t'|'T');
continue:     ('c'|'C')('o'|'O')('n'|'N')('t'|'T')('i'|'I')('n'|'N')('u'|'U')('e'|'E');
copy:         ('c'|'C')('o'|'O')('p'|'P')('y'|'Y');
cross:        ('c'|'C')('r'|'R')('o'|'O')('s'|'S')('s'|'S');
current:      ('c'|'C')('u'|'U')('r'|'R')('r'|'R')('e'|'E')('n'|'N')('t'|'T');
data:         ('d'|'D')('a'|'A')('t'|'T')('a'|'A');
database:     ('d'|'D')('a'|'A')('t'|'T')('a'|'A')('b'|'B')('a'|'A')('s'|'S')('e'|'E');
date:         ('d'|'D')('a'|'A')('t'|'T')('e'|'E');
datetime:     ('d'|'D')('a'|'A')('t'|'T')('e'|'E')('t'|'T')('i'|'I')('m'|'M')('e'|'E');
decimal:      ('d'|'D')('e'|'E')('c'|'C')('i'|'I')('m'|'M')('a'|'A')('l'|'L');
declare:      ('d'|'D')('e'|'E')('c'|'C')('l'|'L')('a'|'A')('r'|'R')('e'|'E');
definer:      ('d'|'D')('e'|'E')('f'|'F')('i'|'I')('n'|'N')('e'|'E')('r'|'R');
delete:       ('d'|'D')('e'|'E')('l'|'L')('e'|'E')('t'|'T')('e'|'E');
desc:         ('d'|'D')('e'|'E')('s'|'S')('c'|'C');
describe:     ('d'|'D')('e'|'E')('s'|'S')('c'|'C')('r'|'R')('i'|'I')('b'|'B')('e'|'E');
descriptor:   ('d'|'D')('e'|'E')('s'|'S')('c'|'C')('r'|'R')('i'|'I')('p'|'P')('t'|'T')('o'|'O')('r'|'R');
deterministic: ('d'|'D')('e'|'E')('t'|'T')('e'|'E')('r'|'R')('m'|'M')('i'|'I')('n'|'N')('i'|'I')('s'|'S')('t'|'T')('i'|'I')('c'|'C');
distinct:     ('d'|'D')('i'|'I')('s'|'S')('t'|'T')('i'|'I')('n'|'N')('c'|'C')('t'|'T');
do:           ('d'|'D')('o'|'O');
drop:         ('d'|'D')('r'|'R')('o'|'O')('p'|'P');
else:         ('e'|'E')('l'|'L')('s'|'S')('e'|'E');
elseif:       ('e'|'E')('l'|'L')('s'|'S')('e'|'E')('i'|'I')('f'|'F');
end:          ('e'|'E')('n'|'N')('d'|'D');
enforced:     ('e'|'E')('n'|'N')('f'|'F')('o'|'O')('r'|'R')('c'|'C')('e'|'E')('d'|'D');
error_:       ('e'|'E')('r'|'R')('r'|'R')('o'|'O')('r'|'R');
except:       ('e'|'E')('x'|'X')('c'|'C')('e'|'E')('p'|'P')('t'|'T');
exception:    ('e'|'E')('x'|'X')('c'|'C')('e'|'E')('p'|'P')('t'|'T')('i'|'I')('o'|'O')('n'|'N');
execute:      ('e'|'E')('x'|'X')('e'|'E')('c'|'C')('u'|'U')('t'|'T')('e'|'E');
exists:       ('e'|'E')('x'|'X')('i'|'I')('s'|'S')('t'|'T')('s'|'S');
explain:      ('e'|'E')('x'|'X')('p'|'P')('l'|'L')('a'|'A')('i'|'I')('n'|'N');
export:       ('e'|'E')('x'|'X')('p'|'P')('o'|'O')('r'|'R')('t'|'T');
external:     ('e'|'E')('x'|'X')('t'|'T')('e'|'E')('r'|'R')('n'|'N')('a'|'A')('l'|'L');
extract:      ('e'|'E')('x'|'X')('t'|'T')('r'|'R')('a'|'A')('c'|'C')('t'|'T');
files:        ('f'|'F')('i'|'I')('l'|'L')('e'|'E')('s'|'S');
fill:         ('f'|'F')('i'|'I')('l'|'L')('l'|'L');
filter_fields: ('f'|'F')('i'|'I')('l'|'L')('t'|'T')('e'|'E')('r'|'R')('_'|'_')('f'|'F')('i'|'I')('e'|'E')('l'|'L')('d'|'D')('s'|'S');
filter:       ('f'|'F')('i'|'I')('l'|'L')('t'|'T')('e'|'E')('r'|'R');
first:        ('f'|'F')('i'|'I')('r'|'R')('s'|'S')('t'|'T');
following:    ('f'|'F')('o'|'O')('l'|'L')('l'|'L')('o'|'O')('w'|'W')('i'|'I')('n'|'N')('g'|'G');
foreign:      ('f'|'F')('o'|'O')('r'|'R')('e'|'E')('i'|'I')('g'|'G')('n'|'N');
format:       ('f'|'F')('o'|'O')('r'|'R')('m'|'M')('a'|'A')('t'|'T');
from:         ('f'|'F')('r'|'R')('o'|'O')('m'|'M');
full:         ('f'|'F')('u'|'U')('l'|'L')('l'|'L');
function:     ('f'|'F')('u'|'U')('n'|'N')('c'|'C')('t'|'T')('i'|'I')('o'|'O')('n'|'N');
generated:    ('g'|'G')('e'|'E')('n'|'N')('e'|'E')('r'|'R')('a'|'A')('t'|'T')('e'|'E')('d'|'D');
grant:        ('g'|'G')('r'|'R')('a'|'A')('n'|'N')('t'|'T');
group_rows:   ('g'|'G')('r'|'R')('o'|'O')('u'|'U')('p'|'P')('_'|'_')('r'|'R')('o'|'O')('w'|'W')('s'|'S');
group:        ('g'|'G')('r'|'R')('o'|'O')('u'|'U')('p'|'P');
having:       ('h'|'H')('a'|'A')('v'|'V')('i'|'I')('n'|'N')('g'|'G');
hidden:       ('h'|'H')('i'|'I')('d'|'D')('d'|'D')('e'|'E')('n'|'N');
ignore:       ('i'|'I')('g'|'G')('n'|'N')('o'|'O')('r'|'R')('e'|'E');
immediate:    ('i'|'I')('m'|'M')('m'|'M')('e'|'E')('d'|'D')('i'|'I')('a'|'A')('t'|'T')('e'|'E');
immutable:    ('i'|'I')('m'|'M')('m'|'M')('u'|'U')('t'|'T')('a'|'A')('b'|'B')('l'|'L')('e'|'E');
import_:      ('i'|'I')('m'|'M')('p'|'P')('o'|'O')('r'|'R')('t'|'T');
in:           ('i'|'I')('n'|'N');
include:      ('i'|'I')('n'|'N')('c'|'C')('l'|'L')('u'|'U')('d'|'D')('e'|'E');
index:        ('i'|'I')('n'|'N')('d'|'D')('e'|'E')('x'|'X');
inner:        ('i'|'I')('n'|'N')('n'|'N')('e'|'E')('r'|'R');
inout:        ('i'|'I')('n'|'N')('o'|'O')('u'|'U')('t'|'T');
insert:       ('i'|'I')('n'|'N')('s'|'S')('e'|'E')('r'|'R')('t'|'T');
intersect:    ('i'|'I')('n'|'N')('t'|'T')('e'|'E')('r'|'R')('s'|'S')('e'|'E')('c'|'C')('t'|'T');
interval:     ('i'|'I')('n'|'N')('t'|'T')('e'|'E')('r'|'R')('v'|'V')('a'|'A')('l'|'L');
invoker:      ('i'|'I')('n'|'N')('v'|'V')('o'|'O')('k'|'K')('e'|'E')('r'|'R');
is:           ('i'|'I')('s'|'S');
isolation:    ('i'|'I')('s'|'S')('o'|'O')('l'|'L')('a'|'A')('t'|'T')('i'|'I')('o'|'O')('n'|'N');
iterate:      ('i'|'I')('t'|'T')('e'|'E')('r'|'R')('a'|'A')('t'|'T')('e'|'E');
join:         ('j'|'J')('o'|'O')('i'|'I')('n'|'N');
json:         ('j'|'J')('s'|'S')('o'|'O')('n'|'N');
key:          ('k'|'K')('e'|'E')('y'|'Y');
language:     ('l'|'L')('a'|'A')('n'|'N')('g'|'G')('u'|'U')('a'|'A')('g'|'G')('e'|'E');
last:         ('l'|'L')('a'|'A')('s'|'S')('t'|'T');
leave:        ('l'|'L')('e'|'E')('a'|'A')('v'|'V')('e'|'E');
left:         ('l'|'L')('e'|'E')('f'|'F')('t'|'T');
level:        ('l'|'L')('e'|'E')('v'|'V')('e'|'E')('l'|'L');
like:         ('l'|'L')('i'|'I')('k'|'K')('e'|'E');
limit:        ('l'|'L')('i'|'I')('m'|'M')('i'|'I')('t'|'T');
load:         ('l'|'L')('o'|'O')('a'|'A')('d'|'D');
loop:         ('l'|'L')('o'|'O')('o'|'O')('p'|'P');
match:        ('m'|'M')('a'|'A')('t'|'T')('c'|'C')('h'|'H');
matched:      ('m'|'M')('a'|'A')('t'|'T')('c'|'C')('h'|'H')('e'|'E')('d'|'D');
materialized: ('m'|'M')('a'|'A')('t'|'T')('e'|'E')('r'|'R')('i'|'I')('a'|'A')('l'|'L')('i'|'I')('z'|'Z')('e'|'E')('d'|'D');
max:          ('m'|'M')('a'|'A')('x'|'X');
message:      ('m'|'M')('e'|'E')('s'|'S')('s'|'S')('a'|'A')('g'|'G')('e'|'E');
min:          ('m'|'M')('i'|'I')('n'|'N');
model:        ('m'|'M')('o'|'O')('d'|'D')('e'|'E')('l'|'L');
module:       ('m'|'M')('o'|'O')('d'|'D')('u'|'U')('l'|'L')('e'|'E');
not:          ('n'|'N')('o'|'O')('t'|'T');
null:         ('n'|'N')('u'|'U')('l'|'L')('l'|'L');
nulls:        ('n'|'N')('u'|'U')('l'|'L')('l'|'L')('s'|'S');
numeric:      ('n'|'N')('u'|'U')('m'|'M')('e'|'E')('r'|'R')('i'|'I')('c'|'C');
offset:       ('o'|'O')('f'|'F')('f'|'F')('s'|'S')('e'|'E')('t'|'T');
on:           ('o'|'O')('n'|'N');
only:         ('o'|'O')('n'|'N')('l'|'L')('y'|'Y');
options:      ('o'|'O')('p'|'P')('t'|'T')('i'|'I')('o'|'O')('n'|'N')('s'|'S');
or:           ('o'|'O')('r'|'R');
order:        ('o'|'O')('r'|'R')('d'|'D')('e'|'E')('r'|'R');
out:          ('o'|'O')('u'|'U')('t'|'T');
outer:        ('o'|'O')('u'|'U')('t'|'T')('e'|'E')('r'|'R');
over:         ('o'|'O')('v'|'V')('e'|'E')('r'|'R');
overwrite:    ('o'|'O')('v'|'V')('e'|'E')('r'|'R')('w'|'W')('r'|'R')('i'|'I')('t'|'T')('e'|'E');
partition:    ('p'|'P')('a'|'A')('r'|'R')('t'|'T')('i'|'I')('t'|'T')('i'|'I')('o'|'O')('n'|'N');
percent:      ('p'|'P')('e'|'E')('r'|'R')('c'|'C')('e'|'E')('n'|'N')('t'|'T');
pivot:        ('p'|'P')('i'|'I')('v'|'V')('o'|'O')('t'|'T');
policies:     ('p'|'P')('o'|'O')('l'|'L')('i'|'I')('c'|'C')('i'|'I')('e'|'E')('s'|'S');
policy:       ('p'|'P')('o'|'O')('l'|'L')('i'|'I')('c'|'C')('y'|'Y');
preceding:    ('p'|'P')('r'|'R')('e'|'E')('c'|'C')('e'|'E')('d'|'D')('i'|'I')('n'|'N')('g'|'G');
primary:      ('p'|'P')('r'|'R')('i'|'I')('m'|'M')('a'|'A')('r'|'R')('y'|'Y');
private:      ('p'|'P')('r'|'R')('i'|'I')('v'|'V')('a'|'A')('t'|'T')('e'|'E');
privilege:    ('p'|'P')('r'|'R')('i'|'I')('v'|'V')('i'|'I')('l'|'L')('e'|'E')('g'|'G')('e'|'E');
privileges:   ('p'|'P')('r'|'R')('i'|'I')('v'|'V')('i'|'I')('l'|'L')('e'|'E')('g'|'G')('e'|'E')('s'|'S');
procedure:    ('p'|'P')('r'|'R')('o'|'O')('c'|'C')('e'|'E')('d'|'D')('u'|'U')('r'|'R')('e'|'E');
proto:        ('p'|'P')('r'|'R')('o'|'O')('t'|'T')('o'|'O');
public:       ('p'|'P')('u'|'U')('b'|'B')('l'|'L')('i'|'I')('c'|'C');
qualify:      ('q'|'Q')('u'|'U')('a'|'A')('l'|'L')('i'|'I')('f'|'F')('y'|'Y');
raise:        ('r'|'R')('a'|'A')('i'|'I')('s'|'S')('e'|'E');
range:        ('r'|'R')('a'|'A')('n'|'N')('g'|'G')('e'|'E');
read:         ('r'|'R')('e'|'E')('a'|'A')('d'|'D');
references:   ('r'|'R')('e'|'E')('f'|'F')('e'|'E')('r'|'R')('e'|'E')('n'|'N')('c'|'C')('e'|'E')('s'|'S');
remote:       ('r'|'R')('e'|'E')('m'|'M')('o'|'O')('t'|'T')('e'|'E');
remove:       ('r'|'R')('e'|'E')('m'|'M')('o'|'O')('v'|'V')('e'|'E');
rename:       ('r'|'R')('e'|'E')('n'|'N')('a'|'A')('m'|'M')('e'|'E');
repeat:       ('r'|'R')('e'|'E')('p'|'P')('e'|'E')('a'|'A')('t'|'T');
repeatable:   ('r'|'R')('e'|'E')('p'|'P')('e'|'E')('a'|'A')('t'|'T')('a'|'A')('b'|'B')('l'|'L')('e'|'E');
replace_fields: ('r'|'R')('e'|'E')('p'|'P')('l'|'L')('a'|'A')('c'|'C')('e'|'E')('_'|'_')('f'|'F')('i'|'I')('e'|'E')('l'|'L')('d'|'D')('s'|'S');
replace:      ('r'|'R')('e'|'E')('p'|'P')('l'|'L')('a'|'A')('c'|'C')('e'|'E');
respect:      ('r'|'R')('e'|'E')('s'|'S')('p'|'P')('e'|'E')('c'|'C')('t'|'T');
restrict:     ('r'|'R')('e'|'E')('s'|'S')('t'|'T')('r'|'R')('i'|'I')('c'|'C')('t'|'T');
restriction:  ('r'|'R')('e'|'E')('s'|'S')('t'|'T')('r'|'R')('i'|'I')('c'|'C')('t'|'T')('i'|'I')('o'|'O')('n'|'N');
return:       ('r'|'R')('e'|'E')('t'|'T')('u'|'U')('r'|'R')('n'|'N');
returns:      ('r'|'R')('e'|'E')('t'|'T')('u'|'U')('r'|'R')('n'|'N')('s'|'S');
revoke:       ('r'|'R')('e'|'E')('v'|'V')('o'|'O')('k'|'K')('e'|'E');
right:        ('r'|'R')('i'|'I')('g'|'G')('h'|'H')('t'|'T');
rollback:     ('r'|'R')('o'|'O')('l'|'L')('l'|'L')('b'|'B')('a'|'A')('c'|'C')('k'|'K');
rollup:       ('r'|'R')('o'|'O')('l'|'L')('l'|'L')('u'|'U')('p'|'P');
row:          ('r'|'R')('o'|'O')('w'|'W');
rows:         ('r'|'R')('o'|'O')('w'|'W')('s'|'S');
run:          ('r'|'R')('u'|'U')('n'|'N');
safe_cast:    ('s'|'S')('a'|'A')('f'|'F')('e'|'E')'_'('c'|'C')('a'|'A')('s'|'S')('t'|'T');
schema:       ('s'|'S')('c'|'C')('h'|'H')('e'|'E')('m'|'M')('a'|'A');
search:       ('s'|'S')('e'|'E')('a'|'A')('r'|'R')('c'|'C')('h'|'H');
security:     ('s'|'S')('e'|'E')('c'|'C')('u'|'U')('r'|'R')('i'|'I')('t'|'T')('y'|'Y');
select:       ('s'|'S')('e'|'E')('l'|'L')('e'|'E')('c'|'C')('t'|'T');
show:         ('s'|'S')('h'|'H')('o'|'O')('w'|'W');
simple:       ('s'|'S')('i'|'I')('m'|'M')('p'|'P')('l'|'L')('e'|'E');
snapshot:     ('s'|'S')('n'|'N')('a'|'A')('p'|'P')('s'|'S')('h'|'H')('o'|'O')('t'|'T');
source:       ('s'|'S')('o'|'O')('u'|'U')('r'|'R')('c'|'C')('e'|'E');
sql:          ('s'|'S')('q'|'Q')('l'|'L');
stable:       ('s'|'S')('t'|'T')('a'|'A')('b'|'B')('l'|'L')('e'|'E');
start:        ('s'|'S')('t'|'T')('a'|'A')('r'|'R')('t'|'T');
stored:       ('s'|'S')('t'|'T')('o'|'O')('r'|'R')('e'|'E')('d'|'D');
storing:      ('s'|'S')('t'|'T')('o'|'O')('r'|'R')('i'|'I')('n'|'N')('g'|'G');
struct:       ('s'|'S')('t'|'T')('r'|'R')('u'|'U')('c'|'C')('t'|'T');
system_time:  ('s'|'S')('y'|'Y')('s'|'S')('t'|'T')('e'|'E')('m'|'M')('_'|'_')('t'|'T')('i'|'I')('m'|'M')('e'|'E');
system:       ('s'|'S')('y'|'Y')('s'|'S')('t'|'T')('e'|'E')('m'|'M');
table:        ('t'|'T')('a'|'A')('b'|'B')('l'|'L')('e'|'E');
tablesample:  ('t'|'T')('a'|'A')('b'|'B')('l'|'L')('e'|'E')('s'|'S')('a'|'A')('m'|'M')('p'|'P')('l'|'L')('e'|'E');
target:       ('t'|'T')('a'|'A')('r'|'R')('g'|'G')('e'|'E')('t'|'T');
temp:         ('t'|'T')('e'|'E')('m'|'M')('p'|'P');
temporary:    ('t'|'T')('e'|'E')('m'|'M')('p'|'P')('o'|'O')('r'|'R')('a'|'A')('r'|'R')('y'|'Y');
then:         ('t'|'T')('h'|'H')('e'|'E')('n'|'N');
time:         ('t'|'T')('i'|'I')('m'|'M')('e'|'E');
timestamp:    ('t'|'T')('i'|'I')('m'|'M')('e'|'E')('s'|'S')('t'|'T')('a'|'A')('m'|'M')('p'|'P');
to:           ('t'|'T')('o'|'O');
transaction:  ('t'|'T')('r'|'R')('a'|'A')('n'|'N')('s'|'S')('a'|'A')('c'|'C')('t'|'T')('i'|'I')('o'|'O')('n'|'N');
transform:    ('t'|'T')('r'|'R')('a'|'A')('n'|'N')('s'|'S')('f'|'F')('o'|'O')('r'|'R')('m'|'M');
truncate:     ('t'|'T')('r'|'R')('u'|'U')('n'|'N')('c'|'C')('a'|'A')('t'|'T')('e'|'E');
type:         ('t'|'T')('y'|'Y')('p'|'P')('e'|'E');
unbounded:    ('u'|'U')('n'|'N')('b'|'B')('o'|'O')('u'|'U')('n'|'N')('d'|'D')('e'|'E')('d'|'D');
union:        ('u'|'U')('n'|'N')('i'|'I')('o'|'O')('n'|'N');
unique:       ('u'|'U')('n'|'N')('i'|'I')('q'|'Q')('u'|'U')('e'|'E');
unnest:       ('u'|'U')('n'|'N')('n'|'N')('e'|'E')('s'|'S')('t'|'T');
unpivot:      ('u'|'U')('n'|'N')('p'|'P')('i'|'I')('v'|'V')('o'|'O')('t'|'T');
until:        ('u'|'U')('n'|'N')('t'|'T')('i'|'I')('l'|'L');
update:       ('u'|'U')('p'|'P')('d'|'D')('a'|'A')('t'|'T')('e'|'E');
using:        ('u'|'U')('s'|'S')('i'|'I')('n'|'N')('g'|'G');
value:        ('v'|'V')('a'|'A')('l'|'L')('u'|'U')('e'|'E');
values:       ('v'|'V')('a'|'A')('l'|'L')('u'|'U')('e'|'E')('s'|'S');
view:         ('v'|'V')('i'|'I')('e'|'E')('w'|'W');
views:        ('v'|'V')('i'|'I')('e'|'E')('w'|'W')('s'|'S');
volatile:     ('v'|'V')('o'|'O')('l'|'L')('a'|'A')('t'|'T')('i'|'I')('l'|'L')('e'|'E');
weight:       ('w'|'W')('e'|'E')('i'|'I')('g'|'G')('h'|'H')('t'|'T');
when:         ('w'|'W')('h'|'H')('e'|'E')('n'|'N');
where:        ('w'|'W')('h'|'H')('e'|'E')('r'|'R')('e'|'E');
while:        ('w'|'W')('h'|'H')('i'|'I')('l'|'L')('e'|'E');
window:       ('w'|'W')('i'|'I')('n'|'N')('d'|'D')('o'|'O')('w'|'W');
with:         ('w'|'W')('i'|'I')('t'|'T')('h'|'H');
write:        ('w'|'W')('r'|'R')('i'|'I')('t'|'T')('e'|'E');
zone:         ('z'|'Z')('o'|'O')('n'|'N')('e'|'E');

comment: '-''-'{_single_line_comment_char}['\n']
       | '#'{_single_line_comment_char}['\n']
       | _cs_comment
       ;

unterminated_comment: _cs_comment_begin ;

/* C-style comments using slash+star */
_cs_comment:        _cs_comment_begin'*'{'*'}'/' ;
_cs_comment_begin:  '/''*'{(.|'*')} ;

_single_line_comment_char:
      '\x01'-'\x09'         /* skip null (0x00) */
    | '\x0B'-'\x7F'         /* skip line feed (0x0A) */
    | '\u0080'-'\uFFFC'
    | '\uFFFE'-'\U0010FFFF' /* skip invalid code point (\uFFFD) */
    ;

identifier: _unquoted_identifier|_bqtext ;

unterminated_escaped_identifier: _bqtext_0;

_unquoted_identifier: _id_0{(_id_0|'0'-'9')} ;
_id_0:      'a'-'z'|'A'-'Z'|'_' ;
_bqtext_0:  _bq{(_id_char|_any_escape)} ;
_bqtext:    _bqtext_0 _bq ;
_bq:        '`' ;
_id_char:   '\x01'-'\x09' /* skip null (0x00) */
          | '\x0B'-'\x5B' /* skip line feed (0x0A) */
          | '\x5D'-'\x5F' /* skip backslash (0x5C) */
          | '\x61'-'\x7F' /* skip backtick (0x60) */
          ;

!whitespace: ' '|'\t'|'\n'|'\r'|'\u00a0' ;

illegal_character: . ;

/* Syntax part */

<<
import (
    "github.com/paulourio/bqfmt/zetasql/ast"
)
>>

StartMode:
     SQLStatement
    ;

SQLStatement:
      UnterminatedSQLStatement OptSemicolon
    ;

UnterminatedSQLStatement:
      SQLStatementBody
    ;

OptSemicolon:
      ";"
    | empty
    ;

SQLStatementBody:
      QueryStatement
    ;

QueryStatement:
      Query
      << ast.NewQueryStatement($0) >>
    ;

/* We don't use OptWithClause  for the firest statemet because it causes
   shift/reduce conflicts.
 */
Query:
      WithClause
      QueryPrimaryOrSetOperation
      OptOrderByClause
      OptLimitOffsetClause
      << ast.NewQuery($0, $1, $2, $3) >>
    | QueryPrimaryOrSetOperation
      OptOrderByClause
      OptLimitOffsetClause
      << ast.NewQuery(nil, $0, $1, $2) >>
    | WithClause "," select
      << NewSyntaxError(
             $1,
             "Trailing comma after the WITH clause before the "+
             "SELECT clause is not allowed") >>
    ;

/* Query variant to resolve ambiguous case.
   Difference from Query: where the other rule allows preffix (Query),
   this rules uses Expression to parse the same thing instead, and then
   errors out if the parsed entity is not an expression subquery.

   Keep in sync with Query.
 */
QueryMaybeExpression:
      WithClause
      QueryPrimaryOrSetOperationMaybeExpression
      OptOrderByClause
      OptLimitOffsetClause
      << ast.NewQuery($0, $1, $2, $3) >>
    | QueryPrimaryOrSetOperationMaybeExpression
      OptOrderByClause
      OptLimitOffsetClause
      << ast.NewQuery(nil, $0, $1, $2) >>
    | WithClause "," select
      << NewSyntaxError(
             $1,
             "Trailing comma after the WITH clause before the "+
             "SELECT clause is not allowed") >>
    ;

QueryPrimaryOrSetOperation:
      QueryPrimary
    | QuerySetOperation
    ;

QueryPrimaryOrSetOperationMaybeExpression:
      QueryPrimaryMaybeExpression
    | QuerySetOperationMaybeExpression
    ;

QueryPrimary:
      Select
    | "(" Query ")"
      << SetQueryParenthesized($0, $1, $2) >>
    ;

QueryPrimaryMaybeExpression:
      Select
    | Expression
      /* We require that Expression is an ExpressionSubquery. */
      << ValidateParenthesizedSubquery($0) >>
    ;

QuerySetOperation:
      QuerySetOperationPrefix
    ;

QuerySetOperationPrefix:
      QueryPrimary QuerySetOperationType AllOrDistinct QueryPrimary
      << NewSetOperation($0, $1, $2, $3) >>
    | QuerySetOperationPrefix QuerySetOperationType AllOrDistinct QueryPrimary
      << NewSetOperation($0, $1, $2, $3) >>
    ;

QuerySetOperationMaybeExpression:
      QuerySetOperationPrefixMaybeExpression
    ;

QuerySetOperationPrefixMaybeExpression:
      QueryPrimaryMaybeExpression
      QuerySetOperationType
      AllOrDistinct
      QueryPrimary
      << NewSetOperation($0, $1, $2, $3) >>
    | QuerySetOperationPrefixMaybeExpression
      QuerySetOperationType
      AllOrDistinct
      QueryPrimary
      << NewSetOperation($0, $1, $2, $3) >>
    ;

QuerySetOperationType:
      union       << WrapWithLoc(ast.Union, $0) >>
    | except      << WrapWithLoc(ast.Except, $0) >>
    | intersect   << WrapWithLoc(ast.Intersect, $0) >>
    ;

Select:
      select
      OptAllOrDistinct
      OptSelectAsClause
      SelectList
      OptFromClause
      OptWhereClause
      OptGroupByClause
      OptHavingClause
      OptQualifyClause
      OptWindowClause
      << NewSelect($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) >>
    ;

SelectList:
      SelectListPrefix
    | SelectListPrefix ","
      << UpdateLoc($0, $1) >>
    ;

SelectListPrefix:
      SelectColumn
      << ast.NewSelectList($0) >>
    | SelectListPrefix "," SelectColumn
      << WithExtraChild($0, $2) >>
    ;

SelectColumn:
      Expression
      << ast.NewSelectColumn($0, nil) >>
    | Expression as Alias
      << NewSelectExprAsAlias($0, $1, $2) >>
    | Expression Alias
      << ast.NewSelectColumn($0, $1) >>
    | Expression ".*"
      << NewSelectDotStar($0, $1) >>
    | Expression ".*" StarModifiers
      << NewSelectDotStarWithModifiers($0, $1, $2) >>
    | "*"
      << NewSelectStar($0) >>
    | "*" StarModifiers
      << NewSelectStarWithModifiers($0, $1) >>
    ;

Alias:
      Identifier << ast.NewAlias($0) >>
    ;

StarModifiers:
      StarExceptList
      << ast.NewStarModifiers($0, nil) >>
    | StarModifiersWithReplacePrefix ")"
      << UpdateLoc($0, $1) >>
    ;

StarExceptList:
      StarExceptListPrefix ")"
      << UpdateLoc($0, $1) >>
    ;

StarExceptListPrefix:
      except "(" Identifier
      << NewStarExceptList($0, $2) >>
    | StarExceptListPrefix "," Identifier
      << WithExtraChild($0, $2) >>
    ;

StarModifiersWithReplacePrefix:
      StarExceptList replace "(" StarReplaceItem
      << NewStarModifiers($0, $1, $3) >>
    | replace "(" StarReplaceItem
      << NewStarModifiers(nil, $0, $2) >>
    | StarModifiersWithReplacePrefix "," StarReplaceItem
      << WithExtraChild($0, $2) >>
    ;

StarReplaceItem:
      Expression as Identifier
      << ast.NewStarReplaceItem($0, $2) >>
    ;

WithClause:
      with WithClauseEntry
      << NewWithClause($0, $1) >>
    | WithClause "," WithClauseEntry
      << WithExtraChild($0, $2) >>
    ;

WithClauseEntry:
      Identifier as "(" Query ")"
      << NewWithClauseEntry($0, $3, $4) >>
    ;


OptWhereClause:
      WhereClause
    | empty
    ;

WhereClause:
      where Expression
      << NewWhereClause($0, $1) >>
    ;

OptAllOrDistinct:
      AllOrDistinct
    | empty     << NoAllOrDistinctKeyword, nil >>
    ;

AllOrDistinct:
      all       << WrapWithLoc(AllKeyword, $0) >>
    | distinct  << WrapWithLoc(DistinctKeyword, $0) >>
    ;

OptSelectAsClause:
      as struct
      << NewSelectAs($0, $1) >>
    | as PathExpression
      << NewSelectAs($0, $1) >>
    | empty
    ;

OptFromClause:
      from FromClauseContents
      << NewFromClause($0, $1) >>
    | empty
    ;

FromClauseContents:
      TablePrimary
    | FromClauseContents "," TablePrimary
      << NewCommaJoin($0, $2, $1) >>
    | FromClauseContents JoinType join TablePrimary OptOnOrUsingClauseList
      << NewJoin($0, $3, $4, $1, $2) >>
    ;

OptGroupByClause:
      GroupByClause
    | empty
    ;

GroupByClause:
      GroupByClausePrefix
    ;

GroupByClausePrefix:
      group by GroupingItem
      << NewGroupBy($0, $2) >>
    | GroupByClausePrefix "," GroupingItem
      << WithExtraChild($0, $2) >>
    ;

GroupingItem:
      Expression
      << ast.NewGroupingItem($0, nil) >>
    | RollupList ")"
      <<
      func() (Attrib, error) {
          rollup, err := UpdateLoc($0, $1)
          if err != nil {
              return nil, err
          }

          return ast.NewGroupingItem(nil, rollup)
      }()
      >>
    ;

RollupList:
      rollup "(" Expression
      << NewRollup($0, $2) >>
    | RollupList "," Expression
      << WithExtraChild($0, $2) >>
    ;

OptHavingClause:
      HavingClause
    | empty
    ;

HavingClause:
      having Expression
      << NewHavingClause($0, $1) >>
    ;

OptQualifyClause:
      QualifyClause
    | empty
    ;

QualifyClause:
      qualify Expression
      << NewQualify($0, $1) >>
    ;

OptWindowClause:
      WindowClausePrefix
    | empty
    ;

WindowClausePrefix:
      window WindowDefinition
      << NewWindowClause($0, $1) >>
    | WindowClausePrefix "," WindowSpecification
      << WithExtraChild($0, $2) >>
    ;

WindowDefinition:
      Identifier as WindowSpecification
      << ast.NewWindowDefinition($0, $2) >>
    ;

/* This is only used for parenthesized joins. Unparenthesized JOINs are
   directly covered in FromClauseContents. These rules are separate
   because the FROM clause also allows comma joins, while parenthesized
   joins do not.

   Not that if there are consecutive ON/USING clauses, then this Join
   tree must be processed by TransformExpression in the rule
   TablePrimary before the final AST is returned.
 */
Join:
      JoinInput JoinType join TablePrimary OptOnOrUsingClauseList
      << NewJoin($0, $3, $4, $1, $2) >>
    ;

JoinInput:
      Join
    | TablePrimary
    ;

TablePrimary:
      TablePathExpression
    | "(" Join ")" OptSampleClause
      << NewParenthesizedJoin($1, $3, $0, $2) >>
    | TableSubquery
    ;

TablePathExpression:
      TablePathExpressionBase
      OptPivotOrUnpivotClauseAndAlias
      OptWithOffsetAndAlias
      OptSampleClause
      << NewTablePathExpression($0, $1, $2, $3) >>
    ;

TablePathExpressionBase:
      UnnestExpression
    | MaybeDashedPathExpression
    ;

UnnestExpression:
      unnest "(" Expression ")"
      << NewUnnestExpression($0, $2, $3) >>
    | unnest "(" select
      <<
      NewSyntaxError($2,
          "The argument to UNNEST is an expression, not a query; to use a "+
          "query as an expression, the query must be wrapped with "+
          "additional parentheses to make it a scalar subquery expression")
      >>
    ;

TableSubquery:
      "(" Query ")" OptPivotOrUnpivotClauseAndAlias OptSampleClause
      << NewTableSubquery($0, $1, $2, $3, $4) >>
    ;

OptPivotOrUnpivotClauseAndAlias:
      as Alias
      << PivotUnpivotAliasWithAlias($0, $1) >>
    | Alias
      << &pivotOrUnpivotAndAlias{Alias: $0}, nil >>
    | empty
      << &pivotOrUnpivotAndAlias{}, nil >>
    ;

OptWithOffsetAndAlias:
      with offset OptAsAlias
      << NewWithOffset($0, $1, $2) >>
    | empty
    ;

OptAsAlias:
      OptAs Alias
      << UpdateLoc($1, $0) >>
    | empty
    ;

OptAs:
      as
    | empty
    ;

OptOrderByClause:
      OrderByClausePrefix
    | empty
    ;

OrderByClausePrefix:
      order by OrderingExpression
      << NewOrderBy($0, $2) >>
    | OrderByClausePrefix "," OrderingExpression
      << WithExtraChild($0, $2) >>
    ;

OrderingExpression:
      Expression OptAscOrDesc OptNullOrder
      << ast.NewOrderingExpression($0, $2, $1) >>
    ;

OptAscOrDesc:
      asc   << WrapWithLoc(ast.AscendingOrder, $0) >>
    | desc  << WrapWithLoc(ast.DescendingOrder, $0) >>
    | empty << ast.NoOrderingSpec, nil >>
    ;

OptNullOrder:
      nulls first
      << NewNullOrder($0, $1, true) >>
    | nulls last
      << NewNullOrder($0, $1, false) >>
    | empty
    ;

OptLimitOffsetClause:
      limit PossiblyCastIntLiteralOrParameter
      offset PossiblyCastIntLiteralOrParameter
      << NewLimitOffset($0, $1, $3) >>
    | limit PossiblyCastIntLiteralOrParameter
      << NewLimitOffset($0, $1, nil) >>
    | empty
    ;

WindowSpecification:
      Identifier
      << ast.NewWindowSpecification($0, nil, nil, nil) >>
    | "("
      OptIdentifier
      OptPartitionByClause
      OptOrderByClause
      OptWindowFrameClause
      ")"
      << NewWindowSpecification($0, $1, $2, $3, $4, $5) >>
    ;

OptIdentifier:
      Identifier
    | empty
    ;

OptPartitionByClause:
      PartitionByClause
    | empty
    ;

PartitionByClause:
      PartitionByClausePrefix
    ;

PartitionByClausePrefix:
      partition by Expression
      << NewPartitionBy($0, $2) >>
    | PartitionByClausePrefix "," Expression
      << WithExtraChild($0, $2) >>
    ;

OptWindowFrameClause:
      FrameUnit between WindowFrameBound and WindowFrameBound
      << NewWindowFrameClause($0, $2, $4) >>
    | FrameUnit WindowFrameBound
      << NewWindowFrameClause($0, $1, nil) >>
    | empty
    ;

FrameUnit:
      rows   << WrapWithLoc(ast.Rows, $0) >>
    | range  << WrapWithLoc(ast.Range, $0) >>
    ;

WindowFrameBound:
      unbounded preceding
      << NewWindowFrameExprOnlyWithType($0, $1, ast.UnboundedPreceding) >>
    | unbounded following
      << NewWindowFrameExprOnlyWithType($0, $1, ast.UnboundedFollowing) >>
    | current row
      << NewWindowFrameExprOnlyWithType($0, $1, ast.CurrentRow) >>
    | Expression PrecedingOrFollowing
      << ast.NewWindowFrameExpr($0, $1) >>
    ;

PrecedingOrFollowing:
      preceding  << WrapWithLoc(ast.OffsetPreceding, $0) >>
    | following  << WrapWithLoc(ast.OffsetFollowing, $0) >>
    ;

IntervalExpression:
      interval Expression Identifier
      << NewIntervalExpression($0, $1, $2, nil) >>
    | interval Expression Identifier to Identifier
      << NewIntervalExpression($0, $1, $2, $4) >>
    ;

Type:
      RawType OptTypeParameters
      << NewNamedType($0, $1) >>
    ;

RawType:
      TypeName
    ;

TypeName:
      PathExpression
      << ast.NewNamedType($0) >>
    | ArrayType
    | StructType
    ;

ArrayType:
      array "<" Type ">"
      << NewArrayType($0, $2, $3) >>
    ;

StructType:
      struct "<" ">"
      << NewStructType($0, nil, $2) >>
    | StructTypePrefix ">"
      << UpdateLoc($0, $1) >>
    ;

StructTypePrefix:
      struct "<" StructField
      << NewStructType($0, $2, nil) >>
    | StructTypePrefix "," StructField
      << WithExtraChild($0, $2) >>
    ;

StructField:
      Identifier Type
      << ast.NewStructField($0, $1) >>
    | Type
      << ast.NewStructField(nil, $0) >>
    ;

/* Expressions are organized by precedence order. */
Expression:
      Expression12
    ;

/* Binary OR operator */
Expression12:
      Expression12 or Expression11
      << NewOrExpr($0, $2) >>
    | Expression11
    ;

/* Binary AND operator */
Expression11:
      Expression11 and Expression10
      << NewAndExpr($0, $2) >>
    | Expression10
    ;

/* Unary NOT operator */
Expression10:
      not Expression9
      << NewNotUnaryExpression($0, $1) >>
    | Expression9
    ;

/* Comparison operators: eq, lt, le, gt, ge, ne, like, is */
Expression9:
      Expression9 ComparativeOperator Expression8
      << ast.NewBinaryExpression($1, $0, $2, false) >>
    | Expression9 LikeOperator ParenthesizedInRHS
      << NewLikeBinaryExpression($1, $0, $2) >>
    | Expression9 LikeOperator Expression8
      << NewLikeBinaryExpression($1, $0, $2) >>
    | Expression9 InOperator UnnestExpression
      << NewInExpression($1, $0, $2) >>
    | Expression9 InOperator ParenthesizedInRHS
      << NewInExpression($1, $0, $2) >>
    | Expression9 BetweenOperator Expression8 and Expression8
      << NewBetweenExpression($0, $1, $2, $3, $4) >>
    | Expression9 IsOperator IsExpressionRHS
      << NewIsBinaryExpression($1, $0, $2) >>
    | Expression8
    ;

/* This rule contains a hack to word around the fact that (Query) and
   (Expression) are ambiguous. The reason they are ambiguous is that
   all ZetaSQL queries can be parenthesized. So you cannot write
   something like IN ((SELECT 1)), which could be an IN subquery that
   happens to be parenthesized, or it could be a subquery expression.
 */
ParenthesizedInRHS:
      BareExpressionSubquery
      << ExtractQueryFromSubquery($0) >>
    | "(" Expression1 ")"
      << NewSubqueryOrInList($0, $1, $2) >>
    | InListTwoOrMorePrefix ")"
    ;

IsExpressionRHS:
      NullLiteral
    | BooleanLiteral
    ;

/* Bitwise OR operator */
Expression8:
      Expression8 "|" Expression7
      << ast.NewBinaryExpression(ast.BinaryBitwiseOr, $0, $2, false) >>
    | Expression7
    ;

/* Bitwise XOR operator */
Expression7:
      Expression7 "^" Expression6
      << ast.NewBinaryExpression(ast.BinaryBitwiseXor, $0, $2, false) >>
    | Expression6
    ;

/* Bitwise AND operator */
Expression6:
      Expression6 "&" Expression5
      << ast.NewBinaryExpression(ast.BinaryBitwiseAnd, $0, $2, false) >>
    | Expression5
    ;

/* Bitwise left and right shift operators. */
Expression5:
      Expression5 ShiftOperator Expression4
      << ast.NewBinaryExpression($1, $0, $2, false) >>
    | Expression4
    ;

/* Addition and subtraction operators */
Expression4:
      Expression4 AdditiveOperator Expression3
      << ast.NewBinaryExpression($1, $0, $2, false) >>
    | Expression3
    ;

/* Multiplication, division, and concatenation operators. */
Expression3:
      Expression3 MultiplicativeOperator Expression2
      << ast.NewBinaryExpression($1, $0, $2, false) >>
    | Expression3 ConcatOp Expression2
      << ast.NewBinaryExpression($1, $0, $2, false) >>
    | Expression2
    ;

/* Unary operators */
Expression2:
      UnaryOperator Expression2
      << ast.NewUnaryExpression($0, $1) >>
    | Expression1
    ;

/* Field access operator, array subscript operator */
Expression1:
      NullLiteral
    | IntegerLiteral
    | BooleanLiteral
    | BytesLiteral
    | StringLiteral
    | FloatingPointLiteral
    | NumericLiteral
    | BigNumericLiteral
    | DateOrTimeLiteral
    | JSONLiteral
    | ParenthesizedExpression
    | ArrayConstructor
    | StructConstructor
    | ExpressionSubquery
    | CaseExpression
    | CastExpression
    | FunctionCallExpressionWithClauses
    | Expression1 "[" Expression1 "]"
      << NewArrayElement($0, $1, $2, $3) >>
    | Expression1 "." Identifier
      << ExpandPathExpressionOrNewDotIdentifier($0, $1, $2) >>
    | IntervalExpression
    | Identifier
      << ast.NewPathExpression($0) >>
    ;

LikeOperator:
      like     << WrapWithLoc(ast.NotKeywordAbsent, $0) >>
    | not like << WrapWithLoc(ast.NotKeywordPresent, $0, $1) >>
    ;

InOperator:
      in      << WrapWithLoc(ast.NotKeywordAbsent, $0) >>
    | not in  << WrapWithLoc(ast.NotKeywordPresent, $0, $1) >>
    ;

BetweenOperator:
      between     << WrapWithLoc(ast.NotKeywordAbsent, $0) >>
    | not between << WrapWithLoc(ast.NotKeywordPresent, $0, $1) >>
    ;

IsOperator:
      is      << WrapWithLoc(ast.NotKeywordAbsent, $0) >>
    | is not  << WrapWithLoc(ast.NotKeywordPresent, $0, $1) >>
    ;

UnaryOperator:
      "+"  << WrapWithLoc(ast.UnaryPlus, $0) >>
    | "-"  << WrapWithLoc(ast.UnaryMinus, $0) >>
    | "~"  << WrapWithLoc(ast.UnaryBitwiseNot, $0) >>
    ;

MultiplicativeOperator:
      "*"  << WrapWithLoc(ast.BinaryMultiply, $0) >>
    | "/"  << WrapWithLoc(ast.BinaryDivide, $0) >>
    ;

AdditiveOperator:
      "+"  << WrapWithLoc(ast.BinaryPlus, $0) >>
    | "-"  << WrapWithLoc(ast.BinaryMinus, $0) >>
    ;

ConcatOp:
      "||" << WrapWithLoc(ast.BinaryConcat, $0) >>
    ;

ShiftOperator:
      "<<"  << WrapWithLoc(ast.LeftShift, $0) >>
    | ">>"  << WrapWithLoc(ast.RightShift, $0) >>
    ;

IntegerLiteral:
      integer_literal
      << NewIntLiteral($0) >>
    ;

StringLiteral:
      string_literal
      << NewStringLiteral($0) >>
    ;

FloatingPointLiteral:
      floating_point_literal
      << NewFloatLiteral($0) >>
    ;

BytesLiteral:
      bytes_literal
      << NewBytesLiteral($0) >>
    ;

BooleanLiteral:
      boolean_literal
      << NewBooleanLiteral($0) >>
    ;

NullLiteral:
      null
      << NewNullLiteral($0) >>
    ;

NumericLiteral:
      NumericPrefix string_literal
      << NewNumericLiteral($0, $1) >>
    ;

NumericPrefix:
      numeric
    | decimal
    ;

BigNumericLiteral:
      BigNumericPrefix string_literal
      << NewBigNumericLiteral($0, $1) >>
    ;

BigNumericPrefix:
      bignumeric
    | bigdecimal
    ;

DateOrTimeLiteral:
      DateOrTimeLiteralKind StringLiteral
      << NewDateOrTimeLiteral($0, $1) >>
    ;

DateOrTimeLiteralKind:
      date       << WrapWithLoc(ast.DateKind, $0) >>
    | datetime   << WrapWithLoc(ast.DateTimeKind, $0) >>
    | time       << WrapWithLoc(ast.TimeKind, $0) >>
    | timestamp  << WrapWithLoc(ast.TimestampKind, $0) >>
    ;

JSONLiteral:
      json string_literal
      << NewJSONLiteral($0, $1) >>
    ;

MaybeDashedPathExpression:
      PathExpression
    | DashedPathExpression
    ;

PathExpression:
      Identifier
      << ast.NewPathExpression($0) >>
    | PathExpression "." Identifier
      << WithExtraChild($0, $2) >>
    ;

DashedPathExpression:
      DashedIdentifier
    | DashedPathExpression "." Identifier
    ;

DashedIdentifier:
      identifier "-" identifier
      << NewDashedIdentifier($0, $1) >>
    ;

Identifier:
      identifier
      << NewIdentifier($0, true) >>
    | KeywordAsIdentifier
      << NewIdentifier($0, true) >>
    ;

KeywordAsIdentifier:
      abort
    | access
    | action
    | aggregate
    | add
    | alter
    | anonymization
    | analyze
    | assert
    | batch
    | begin
    | bigdecimal
    | bignumeric
    | break
    | call
    | cascade
    | check
    | clamped
    | clone
    | copy
    | cluster
    | column
    | columns
    | commit
    | connection
    | constant
    | constraint
    | continue
    | data
    | database
    | date
    | datetime
    | decimal
    | declare
    | definer
    | delete
    | describe
    | deterministic
    | do
    | drop
    | elseif
    | enforced
    | error_
    | exception
    | execute
    | explain
    | export
    | external
    | files
    | filter
    | filter_fields
    | fill
    | first
    | foreign
    | format
    | function
    | generated
    | grant
    | group_rows
    | hidden
    | immediate
    | immutable
    | import_
    | include
    | index
    | insert
    | inout
    | invoker
    | isolation
    | iterate
    | json
    | key
    | language
    | last
    | leave
    | level
    | load
    | loop
    | match
    | matched
    | materialized
    | max
    | message
    | min
    | model
    | module
    | numeric
    | offset
    | only
    | options
    | out
    | overwrite
    | percent
    | pivot
    | policies
    | policy
    | primary
    | private
    | privilege
    | privileges
    | procedure
    | public
    | qualify
    | raise
    | read
    | references
    | remote
    | remove
    | rename
    | repeat
    | repeatable
    | replace
    | replace_fields
    | restrict
    | restriction
    | returns
    | return
    | revoke
    | rollback
    | row
    | run
    | safe_cast
    | schema
    | search
    | security
    | show
    | simple
    | snapshot
    | source
    | sql
    | stable
    | start
    | stored
    | storing
    | system
    | system_time
    | table
    | target
    | temp
    | temporary
    | time
    | timestamp
    | transaction
    | transform
    | truncate
    | type
    | unique
    | unpivot
    | until
    | update
    | value
    | values
    | view
    | views
    | volatile
    | weight
    | while
    | write
    | zone
    | descriptor
    ;

ExpressionSubquery:
      array "(" Query ")"
      << NewExpressionSubquery($0, $1, $2, $3, ast.ArraySubqueryModifier) >>
    | exists "(" Query ")"
      << NewExpressionSubquery($0, $2, $2, $3, ast.ExistsSubqueryModifier) >>
    | BareExpressionSubquery
    ;

BareExpressionSubquery:
      "(" QueryMaybeExpression ")"
      << NewExpressionSubquery(nil, $0, $1, $2, ast.NoSubqueryModifier) >>
    ;

ParenthesizedExpression:
      "(" Expression ")"
      << SetExpressionParenthesized($0, $1, $2) >>
    ;

InListTwoOrMore:
      /* Reference implementation do not include the closing parenthesis
         in the location. */
      InListTwoOrMorePrefix ")"
      << UpdateLoc($0, $1) >>
    ;

InListTwoOrMorePrefix:
      "(" Expression8 "," Expression8
      << NewInList($0, $1, $3) >>
    | InListTwoOrMorePrefix "," Expression8
      << WithExtraChild($0, $2) >>
    ;

OptSampleClause:
      SampleClause
    | empty
    ;

SampleClause:
      tablesample Identifier "(" SampleSize ")" OptSampleClauseSuffix
      << NewSampleClause($0, $1, $3, $4, $5) >>
    ;

SampleSize:
      SampleSizeValue SampleSizeUnit OptPartitionByClause
      << ast.NewSampleSize($0, $1, $2) >>
    ;

SampleSizeValue:
      PossiblyCastIntLiteralOrParameter
    | FloatingPointLiteral
    ;

SampleSizeUnit:
      rows     << WrapWithLoc(ast.RowsSampling, $0) >>
    | percent  << WrapWithLoc(ast.PercentSampling, $0) >>
    ;

OptSampleClauseSuffix:
      RepeatableClause
      << NewSampleClauseSuffix(nil, nil, nil, $0) >>
    | with weight OptRepeatableClause
      << NewSampleClauseSuffix($0, nil, nil, $1) >>
    | with weight Alias OptRepeatableClause
      << NewSampleClauseSuffix($0, nil, $1, $2) >>
    | with weight as Alias OptRepeatableClause
      << NewSampleClauseSuffix($0, $1, $2, $3) >>
    | empty
    ;

OptRepeatableClause:
      RepeatableClause
    | empty
    ;

RepeatableClause:
      repeatable "(" PossiblyCastIntLiteralOrParameter ")"
      << NewRepeatableClause($0, $2, $3) >>
    ;

PossiblyCastIntLiteralOrParameter:
      CastIntLiteralOrParameter
    | IntLiteralOrParameter
    ;

CastIntLiteralOrParameter:
      cast "(" IntLiteralOrParameter as Type OptFormat ")"
      << NewCastIntLiteralOrParam($0, $2, $4, $5, $6) >>
    ;

IntLiteralOrParameter:
      IntegerLiteral
    | ParameterExpression
    ;

ParameterExpression:
      NamedParameterExpression
    ;

NamedParameterExpression:
      "@" Identifier
      << NewParameterExpr($0, $1) >>
    | "@" KeywordAsIdentifier
      << NewParameterExpr($0, $1) >>
    ;

OptFormat:
      format Expression OptAtTimeZone
      << NewFormatClause($0, $1, $2) >>
    | empty
    ;

OptAtTimeZone:
      at time zone Expression << $3, nil >>
    | empty
    ;

OptPartitionByClause:
      PartitionByClause
    | empty
    ;

PartitionByClause:
      PartitionByClausePrefix
    ;

PartitionByClausePrefix:
      partition by Expression
      <<
      func() (Attrib, error) {
          c, err := ast.NewPartitionBy($2)
          if err != nil { return nil, err }
          return UpdateLoc(c, $0)
      }()
      >>
    | PartitionByClausePrefix "," Expression
      << WithExtraChild($0, $2) >>
    ;

OptTypeParameters:
      TypeParametersPrefix ")"
      << UpdateLoc($0, $1) >>
    | empty
    ;

TypeParametersPrefix:
      "(" TypeParameter
      <<
      func() (Attrib, error) {
          e, err := ast.NewTypeParameterList($1)
          if err != nil {
              return nil, err
          }

          return UpdateLoc(e, $0)
      }()
      >>
    | TypeParametersPrefix "," TypeParameter
      << WithExtraChild($0, $2) >>
    ;

TypeParameter:
      IntegerLiteral
    | BooleanLiteral
    | StringLiteral
    | BytesLiteral
    | FloatingPointLiteral
    ;

OptOnOrUsingClauseList:
      OnOrUsingClauseList
    | empty
    ;

OnOrUsingClauseList:
      OnOrUsingClause
      << ast.NewOnOrUsingClauseList($0) >>
    | OptOnOrUsingClauseList OnOrUsingClause
      << WithExtraChild($0, $1) >>
    ;

OnOrUsingClause:
      OnClause
    | UsingClause
    ;

OnClause:
      on Expression
      <<
      func() (Attrib, error) {
          e, err := ast.NewOnClause($1)
          if err != nil {
              return nil, err
          }

          return UpdateLoc(e, $0)
      }()
      >>
    ;

UsingClause:
      UsingClausePrefix ")"
      << UpdateLoc($0, $1) >>
    ;

UsingClausePrefix:
      using "(" Identifier
      <<
      func() (Attrib, error) {
          c, err := ast.NewUsingClause($2)
          if err != nil {
              return nil, err
          }

          return UpdateLoc(c, $0)
      }()
      >>
    | UsingClausePrefix "," Identifier
      << WithExtraChild($0, $2) >>
    ;

JoinType:
      cross           << WrapWithLoc(ast.CrossJoin, $0) >>
    | full OptOuter   << WrapWithLoc(ast.FullJoin, $0, $1) >>
    | inner           << WrapWithLoc(ast.InnerJoin, $0) >>
    | left OptOuter   << WrapWithLoc(ast.LeftJoin, $0, $1) >>
    | right OptOuter  << WrapWithLoc(ast.RightJoin, $0, $1) >>
    | empty           << ast.DefaultJoin, nil >>
    ;

OptOuter:
      outer
    | empty
    ;

FunctionCallExpressionWithClauses:
      FunctionCallExpression OptOverClause
      <<
      func() (Attrib, error) {
          if $1 != nil {
              return ast.NewAnalyticFunctionCall($0, $1)
          }

          return $0, nil
      }()
      >>
    ;

FunctionCallExpression:
      /* Empty argument list */
      FunctionCallExpressionBase
      OptOrderByClause
      OptLimitOffsetClause
      ")"
      << NewFunctionCall($0, nil, $1, $2, $3) >>
      /* Non-empty argument list. */
    | FunctionCallExpressionWithArgsPrefix
      OptNullHandlingModifier
      OptOrderByClause
      OptLimitOffsetClause
      ")"
      << NewFunctionCall($0, $1, $2, $3, $4) >>
    ;

FunctionCallExpressionWithArgsPrefix:
      FunctionCallExpressionBase FunctionCallArgument
      << WithExtraChild($0, $1) >>
    | FunctionCallExpressionBase "*"
      <<
      func() (Attrib, error) {
          s, err := ast.NewStar()
          if err != nil {
              return nil, err
          }

          s.SetImage("*")

          l, err := UpdateLoc(s, $1)
          if err != nil {
              return nil, err
          }

          return WithExtraChild($0, l)
      }()
      >>
    | FunctionCallExpressionWithArgsPrefix "," FunctionCallArgument
      << WithExtraChild($0, $2) >>
    ;

FunctionCallExpressionBase:
      Expression1 "(" distinct
      <<
      func() (Attrib, error) {
          c, err := ast.NewFunctionCall($0, true)
          if err != nil {
              return nil, err
          }

          return UpdateLoc(c, $2)
      }()
      >>
    | Expression1 "("
      <<
      func() (Attrib, error) {
          c, err := ast.NewFunctionCall($0, false)
          if err != nil {
              return nil, err
          }

          return UpdateLoc(c, $1)
      }()
      >>
    ;

FunctionCallArgument:
      Expression
    ;

OptNullHandlingModifier:
      ignore nulls
      << WrapWithLoc(ast.IgnoreNulls, $0, $1) >>
    | respect nulls
      << WrapWithLoc(ast.RespectNulls, $0, $1) >>
    | empty
      << ast.DefaultNullHandling, nil >>
    ;

OptOverClause:
      OverClause
    | empty
    ;

OverClause:
      over WindowSpecification
      << UpdateLoc($1, $0) >>
    ;

CastExpression:
      cast "(" Expression as Type OptFormat ")"
      <<
      func() (Attrib, error) {
          e, err := ast.NewCastExpression($2, $4, $5, false)
          if err != nil {
              return nil, err
          }

          return UpdateLoc(e, $0, $6)
      }()
      >>
    | safe_cast "(" Expression as Type OptFormat ")"
      <<
      func() (Attrib, error) {
          e, err := ast.NewCastExpression($2, $4, $5, true)
          if err != nil {
              return nil, err
          }

          return UpdateLoc(e, $0, $6)
      }()
      >>
    ;

ArrayConstructor:
      ArrayConstructorPrefixNoExpressions "]"
      << UpdateLoc($0, $1) >>
    | ArrayConstructorPrefix "]"
      << UpdateLoc($0, $1) >>
    ;

ArrayConstructorPrefixNoExpressions:
      array "["
      <<
      func() (Attrib, error) {
          c, err := ast.NewArrayConstructor(nil)
          if err != nil {
              return nil, err
          }

          return UpdateLoc(c, $0, $1)
      }()
      >>
    | "["
      <<
      func() (Attrib, error) {
          c, err := ast.NewArrayConstructor(nil)
          if err != nil {
              return nil, err
          }

          return UpdateLoc(c, $0)
      }()
      >>
    | ArrayType "["
      <<
      func() (Attrib, error) {
          c, err := ast.NewArrayConstructor($0)
          if err != nil {
              return nil, err
          }

          return UpdateLoc(c, $1)
      }()
      >>
    ;

ArrayConstructorPrefix:
      ArrayConstructorPrefixNoExpressions Expression
      << WithExtraChild($0, $1) >>
    | ArrayConstructorPrefix "," Expression
      << WithExtraChild($0, $2) >>
    ;

StructConstructor:
      StructConstructorPrefixWithKeyword ")"
      << UpdateLoc($0, $1) >>
    | StructConstructorPrefixWithKeywordNoArg ")"
      << UpdateLoc($0, $1) >>
    | StructConstructorPrefixWithoutKeyword ")"
      << UpdateLoc($0, $1) >>
    ;

StructConstructorPrefixWithKeyword:
      StructConstructorPrefixWithKeywordNoArg StructConstructorArg
      << WithExtraChild($0, $1) >>
    | StructConstructorPrefixWithKeyword "," StructConstructorArg
      << WithExtraChild($0, $2) >>
    ;

StructConstructorPrefixWithKeywordNoArg:
      StructType "("
      << NewStructConstructorWithKeyword($0) >>
    | struct "("
      << NewStructConstructorWithKeyword($0) >>
    ;

StructConstructorPrefixWithoutKeyword:
      "(" Expression "," Expression
      << NewStructConstructorWithParens($0, $1, $3) >>
    | StructConstructorPrefixWithoutKeyword "," Expression
      << WithExtraChild($0, $2) >>
    ;

StructConstructorArg:
      Expression OptAsAliasWithRequiredAs
      << ast.NewStructConstructorArg($0, $1) >>
    ;

OptAsAliasWithRequiredAs:
      as Alias
      << UpdateLoc($1, $0) >>
    | empty
    ;

CaseExpression:
      CaseExpressionPrefix end
      << UpdateLoc($0, $1) >>
    | CaseExpressionPrefix else Expression end
      << CaseExpressionWithElse($0, $2, $3) >>
    ;

CaseExpressionPrefix:
      CaseNoValueExpressionPrefix
    | CaseValueExpressionPrefix
    ;

CaseValueExpressionPrefix:
      case Expression when Expression then Expression
      << NewCaseValueExpression($0, $1, $3, $5) >>
    | CaseValueExpressionPrefix when Expression then Expression
      << WithExtraChildren($0, $2, $4) >>
    ;

CaseNoValueExpressionPrefix:
      case when Expression then Expression
      << NewCaseNoValueExpression($0, $2, $4) >>
    | CaseNoValueExpressionPrefix when Expression then Expression
      << WithExtraChildren($0, $2, $4) >>
    ;

ComparativeOperator:
      "="   << WrapWithLoc(ast.BinaryEq, $0) >>
    | "!="  << WrapWithLoc(ast.BinaryNE, $0) >>
    | "<>"  << WrapWithLoc(ast.BinaryNE2, $0) >>
    | "<"   << WrapWithLoc(ast.BinaryLT, $0) >>
    | "<="  << WrapWithLoc(ast.BinaryLE, $0) >>
    | ">"   << WrapWithLoc(ast.BinaryGT, $0) >>
    | ">="  << WrapWithLoc(ast.BinaryGE, $0) >>
    ;
